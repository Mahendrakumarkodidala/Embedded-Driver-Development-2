
RTC_Alarm_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004360  08004360  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004360  08004360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004368  08004368  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004368  08004368  00005368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004370  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000005c  080043cc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080043cc  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af28  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0f  00000000  00000000  00010fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00012ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bf  00000000  00000000  00013398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dcb  00000000  00000000  00013a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc6b  00000000  00000000  00035822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce977  00000000  00000000  0004148d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fe04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c0  00000000  00000000  0010fe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00112708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004200 	.word	0x08004200

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004200 	.word	0x08004200

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:
#include "main_app.h"

extern RTC_HandleTypeDef hrtc;

void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 fbf2 	bl	8000d9c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f000 fd62 	bl	8001080 <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005c8:	f000 ff16 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <RTC_Alarm_IRQHandler>:


void RTC_Alarm_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&hrtc);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <RTC_Alarm_IRQHandler+0x10>)
 80005d6:	f002 fc59 	bl	8002e8c <HAL_RTC_AlarmIRQHandler>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c0 	.word	0x200000c0

080005e4 <printmsg>:
UART_HandleTypeDef huart2;

RTC_HandleTypeDef hrtc;

void printmsg(char *format,...)
 {
 80005e4:	b40f      	push	{r0, r1, r2, r3}
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b096      	sub	sp, #88	@ 0x58
 80005ea:	af00      	add	r7, sp, #0
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;

	va_start(args, format);
 80005ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005f0:	607b      	str	r3, [r7, #4]

	vsprintf(str, format,args);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f976 	bl	80038ec <vsiprintf>

	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fe03 	bl	8000210 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f107 0108 	add.w	r1, r7, #8
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	4805      	ldr	r0, [pc, #20]	@ (800062c <printmsg+0x48>)
 8000618:	f002 fd96 	bl	8003148 <HAL_UART_Transmit>

	va_end(args);
 }
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	@ 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000626:	b004      	add	sp, #16
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000078 	.word	0x20000078

08000630 <main>:

int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_Init();
 8000634:	f000 fb60 	bl	8000cf8 <HAL_Init>

	GPIO_Init();
 8000638:	f000 f8fe 	bl	8000838 <GPIO_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 800063c:	2032      	movs	r0, #50	@ 0x32
 800063e:	f000 f80b 	bl	8000658 <SystemClock_Config_HSE>

	UART2_Init();
 8000642:	f000 f951 	bl	80008e8 <UART2_Init>

	RTC_Init();
 8000646:	f000 f8a1 	bl	800078c <RTC_Init>

	printmsg("This is RTC Alarm Test program\r\n");
 800064a:	4802      	ldr	r0, [pc, #8]	@ (8000654 <main+0x24>)
 800064c:	f7ff ffca 	bl	80005e4 <printmsg>

	while(1);
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <main+0x20>
 8000654:	08004218 	.word	0x08004218

08000658 <SystemClock_Config_HSE>:
	return 0;
}


void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	@ 0x58
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000662:	2300      	movs	r3, #0
 8000664:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch(clock_freq)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b78      	cmp	r3, #120	@ 0x78
 8000680:	d038      	beq.n	80006f4 <SystemClock_Config_HSE+0x9c>
 8000682:	2b78      	cmp	r3, #120	@ 0x78
 8000684:	dc7c      	bgt.n	8000780 <SystemClock_Config_HSE+0x128>
 8000686:	2b32      	cmp	r3, #50	@ 0x32
 8000688:	d002      	beq.n	8000690 <SystemClock_Config_HSE+0x38>
 800068a:	2b54      	cmp	r3, #84	@ 0x54
 800068c:	d019      	beq.n	80006c2 <SystemClock_Config_HSE+0x6a>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 800068e:	e077      	b.n	8000780 <SystemClock_Config_HSE+0x128>
		  Osc_Init.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8000694:	2332      	movs	r3, #50	@ 0x32
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
		  Osc_Init.PLL.PLLQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	     break;
 80006c0:	e032      	b.n	8000728 <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	643b      	str	r3, [r7, #64]	@ 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	     break;
 80006f2:	e019      	b.n	8000728 <SystemClock_Config_HSE+0xd0>
		  Osc_Init.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  Osc_Init.PLL.PLLN = 120;
 80006f8:	2378      	movs	r3, #120	@ 0x78
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000718:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071e:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 8000720:	2303      	movs	r3, #3
 8000722:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	     break;
 8000726:	bf00      	nop
	 }

	if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fcef 	bl	8002110 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config_HSE+0xe4>
	{
		Error_handler();
 8000738:	f000 f9ca 	bl	8000ad0 <Error_handler>
	}

	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 800073c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fe6e 	bl	8001428 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config_HSE+0xfe>
	{
		Error_handler();
 8000752:	f000 f9bd 	bl	8000ad0 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000756:	f000 ff4d 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 800075a:	6538      	str	r0, [r7, #80]	@ 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 800075c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <SystemClock_Config_HSE+0x130>)
 8000760:	fba2 2303 	umull	r2, r3, r2, r3
 8000764:	099b      	lsrs	r3, r3, #6
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fc61 	bl	800102e <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800076c:	2004      	movs	r0, #4
 800076e:	f000 fc6b 	bl	8001048 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	f04f 30ff 	mov.w	r0, #4294967295
 800077a:	f000 fc2e 	bl	8000fda <HAL_NVIC_SetPriority>
 800077e:	e000      	b.n	8000782 <SystemClock_Config_HSE+0x12a>
	   return ;
 8000780:	bf00      	nop
 }
 8000782:	3758      	adds	r7, #88	@ 0x58
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	10624dd3 	.word	0x10624dd3

0800078c <RTC_Init>:


void RTC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
   hrtc.Instance = RTC;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <RTC_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <RTC_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat =RTC_HOURFORMAT_12;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <RTC_Init+0x44>)
 8000798:	2240      	movs	r2, #64	@ 0x40
 800079a:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 0x7F;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <RTC_Init+0x44>)
 800079e:	227f      	movs	r2, #127	@ 0x7f
 80007a0:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 0xFF;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <RTC_Init+0x44>)
 80007a4:	22ff      	movs	r2, #255	@ 0xff
 80007a6:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <RTC_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <RTC_Init+0x44>)
 80007b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007b4:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <RTC_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]

   if( HAL_RTC_Init(&hrtc) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <RTC_Init+0x44>)
 80007be:	f001 ff45 	bl	800264c <HAL_RTC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <RTC_Init+0x40>
   {
	   Error_handler();
 80007c8:	f000 f982 	bl	8000ad0 <Error_handler>
   }
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000c0 	.word	0x200000c0
 80007d4:	40002800 	.word	0x40002800

080007d8 <RTC_CalendarConfig>:



void  RTC_CalendarConfig(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
	RTC_DateTypeDef RTC_DateInit;

	//4:30:54 PM Date : 31 March 2024 SUNDAY

	//TIME
	RTC_TimeInit.Hours = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	713b      	strb	r3, [r7, #4]
	RTC_TimeInit.Minutes = 30;
 80007e2:	231e      	movs	r3, #30
 80007e4:	717b      	strb	r3, [r7, #5]
	RTC_TimeInit.Seconds = 54;
 80007e6:	2336      	movs	r3, #54	@ 0x36
 80007e8:	71bb      	strb	r3, [r7, #6]
	RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_PM;
 80007ea:	2301      	movs	r3, #1
 80007ec:	71fb      	strb	r3, [r7, #7]

	if( HAL_RTC_SetTime(&hrtc, &RTC_TimeInit,RTC_FORMAT_BIN)!= HAL_OK )
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	@ (8000834 <RTC_CalendarConfig+0x5c>)
 80007f6:	f001 ffac 	bl	8002752 <HAL_RTC_SetTime>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <RTC_CalendarConfig+0x2c>
	{
		Error_handler();
 8000800:	f000 f966 	bl	8000ad0 <Error_handler>
	}

	//DATE
	RTC_DateInit.Date = 31;
 8000804:	231f      	movs	r3, #31
 8000806:	70bb      	strb	r3, [r7, #2]
	RTC_DateInit.Month = RTC_MONTH_MARCH;
 8000808:	2303      	movs	r3, #3
 800080a:	707b      	strb	r3, [r7, #1]
	RTC_DateInit.Year = 24;
 800080c:	2318      	movs	r3, #24
 800080e:	70fb      	strb	r3, [r7, #3]
	RTC_DateInit.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000810:	2307      	movs	r3, #7
 8000812:	703b      	strb	r3, [r7, #0]

	if( HAL_RTC_SetDate(&hrtc,&RTC_DateInit,RTC_FORMAT_BIN)!= HAL_OK )
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <RTC_CalendarConfig+0x5c>)
 800081c:	f002 f891 	bl	8002942 <HAL_RTC_SetDate>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <RTC_CalendarConfig+0x52>
	{
		Error_handler();
 8000826:	f000 f953 	bl	8000ad0 <Error_handler>
	}
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c0 	.word	0x200000c0

08000838 <GPIO_Init>:

void GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	@ 0x30
 800083c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <GPIO_Init+0xa4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a25      	ldr	r2, [pc, #148]	@ (80008dc <GPIO_Init+0xa4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <GPIO_Init+0xa4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <GPIO_Init+0xa4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a1e      	ldr	r2, [pc, #120]	@ (80008dc <GPIO_Init+0xa4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <GPIO_Init+0xa4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]


	GPIO_InitTypeDef ledgpio , buttongpio;

	ledgpio.Pin = GPIO_PIN_5;
 8000876:	2320      	movs	r3, #32
 8000878:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <GPIO_Init+0xa8>)
 800088a:	f000 fc07 	bl	800109c <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_8;
 800088e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000892:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <GPIO_Init+0xa8>)
 80008a4:	f000 fbfa 	bl	800109c <HAL_GPIO_Init>

	buttongpio.Pin = GPIO_PIN_13;
 80008a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ac:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b2:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC,&buttongpio);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <GPIO_Init+0xac>)
 80008c0:	f000 fbec 	bl	800109c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn,15,0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	210f      	movs	r1, #15
 80008c8:	2028      	movs	r0, #40	@ 0x28
 80008ca:	f000 fb86 	bl	8000fda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ce:	2028      	movs	r0, #40	@ 0x28
 80008d0:	f000 fb9f 	bl	8001012 <HAL_NVIC_EnableIRQ>
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	@ 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020800 	.word	0x40020800

080008e8 <UART2_Init>:



void UART2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <UART2_Init+0x44>)
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <UART2_Init+0x48>)
 80008f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate =115200;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <UART2_Init+0x44>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <UART2_Init+0x44>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <UART2_Init+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <UART2_Init+0x44>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <UART2_Init+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <UART2_Init+0x44>)
 8000914:	2208      	movs	r2, #8
 8000916:	615a      	str	r2, [r3, #20]

	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <UART2_Init+0x44>)
 800091a:	f002 fbc5 	bl	80030a8 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000924:	f000 f8d4 	bl	8000ad0 <Error_handler>
	}
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000078 	.word	0x20000078
 8000930:	40004400 	.word	0x40004400

08000934 <getDayofweek>:


char* getDayofweek(uint8_t number)
{
 8000934:	b4b0      	push	{r4, r5, r7}
 8000936:	b08b      	sub	sp, #44	@ 0x2c
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <getDayofweek+0x38>)
 8000940:	f107 040c 	add.w	r4, r7, #12
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[number-1];
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	3b01      	subs	r3, #1
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	3328      	adds	r3, #40	@ 0x28
 800095a:	443b      	add	r3, r7
 800095c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000960:	4618      	mov	r0, r3
 8000962:	372c      	adds	r7, #44	@ 0x2c
 8000964:	46bd      	mov	sp, r7
 8000966:	bcb0      	pop	{r4, r5, r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	08004280 	.word	0x08004280

08000970 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000972:	b08b      	sub	sp, #44	@ 0x2c
 8000974:	af02      	add	r7, sp, #8
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
	 RTC_TimeTypeDef RTC_TimeRead;

	 RTC_DateTypeDef RTC_DateRead;

	 RTC_CalendarConfig();
 800097a:	f7ff ff2d 	bl	80007d8 <RTC_CalendarConfig>

	 HAL_RTC_GetTime(&hrtc,&RTC_TimeRead,RTC_FORMAT_BIN);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	4815      	ldr	r0, [pc, #84]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f001 ff7d 	bl	8002886 <HAL_RTC_GetTime>

	 HAL_RTC_GetDate(&hrtc,&RTC_DateRead,RTC_FORMAT_BIN);
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	2200      	movs	r2, #0
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000996:	f002 f858 	bl	8002a4a <HAL_RTC_GetDate>

	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800099a:	7b3b      	ldrb	r3, [r7, #12]
 800099c:	4619      	mov	r1, r3
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800099e:	7b7b      	ldrb	r3, [r7, #13]
	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 80009a0:	461a      	mov	r2, r3
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 80009a4:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x70>)
 80009a6:	f7ff fe1d 	bl	80005e4 <printmsg>

	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 80009aa:	7a7b      	ldrb	r3, [r7, #9]
 80009ac:	461c      	mov	r4, r3
 80009ae:	7abb      	ldrb	r3, [r7, #10]
 80009b0:	461d      	mov	r5, r3
			 RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 80009b2:	7afb      	ldrb	r3, [r7, #11]
	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 80009b4:	461e      	mov	r6, r3
 80009b6:	7a3b      	ldrb	r3, [r7, #8]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffbb 	bl	8000934 <getDayofweek>
 80009be:	4603      	mov	r3, r0
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4633      	mov	r3, r6
 80009c4:	462a      	mov	r2, r5
 80009c6:	4621      	mov	r1, r4
 80009c8:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x74>)
 80009ca:	f7ff fe0b 	bl	80005e4 <printmsg>

	 RTC_AlarmConfig();
 80009ce:	f000 f80b 	bl	80009e8 <RTC_AlarmConfig>
}
 80009d2:	bf00      	nop
 80009d4:	3724      	adds	r7, #36	@ 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c0 	.word	0x200000c0
 80009e0:	0800429c 	.word	0x0800429c
 80009e4:	080042c0 	.word	0x080042c0

080009e8 <RTC_AlarmConfig>:


 void  RTC_AlarmConfig(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
	 RTC_AlarmTypeDef AlarmA_Set;

	 memset(&AlarmA_Set,0,sizeof(AlarmA_Set));
 80009ee:	463b      	mov	r3, r7
 80009f0:	2228      	movs	r2, #40	@ 0x28
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 ff83 	bl	8003900 <memset>

	 HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 80009fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009fe:	4815      	ldr	r0, [pc, #84]	@ (8000a54 <RTC_AlarmConfig+0x6c>)
 8000a00:	f002 f9b6 	bl	8002d70 <HAL_RTC_DeactivateAlarm>

   //xx:45:09
	 AlarmA_Set.Alarm = RTC_ALARM_A;
 8000a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
	 AlarmA_Set.AlarmTime.Hours = 8;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	703b      	strb	r3, [r7, #0]
	 AlarmA_Set.AlarmTime.Minutes = 00;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	707b      	strb	r3, [r7, #1]
	 AlarmA_Set.AlarmTime.Seconds = 00;
 8000a12:	2300      	movs	r3, #0
 8000a14:	70bb      	strb	r3, [r7, #2]
	 AlarmA_Set.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000a16:	2300      	movs	r3, #0
 8000a18:	70fb      	strb	r3, [r7, #3]
	 AlarmA_Set.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8000a1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a1e:	61fb      	str	r3, [r7, #28]
	 AlarmA_Set.AlarmDateWeekDay = RTC_WEEKDAY_SUNDAY;
 8000a20:	2307      	movs	r3, #7
 8000a22:	f887 3020 	strb.w	r3, [r7, #32]
	 AlarmA_Set.AlarmMask = RTC_ALARMMASK_NONE ;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
	 AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000a2a:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 8000a2e:	61bb      	str	r3, [r7, #24]

	 if ( HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4807      	ldr	r0, [pc, #28]	@ (8000a54 <RTC_AlarmConfig+0x6c>)
 8000a38:	f002 f856 	bl	8002ae8 <HAL_RTC_SetAlarm_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <RTC_AlarmConfig+0x5e>
	 {
		 Error_handler();
 8000a42:	f000 f845 	bl	8000ad0 <Error_handler>
	 }

	 printmsg("Alarm Set Successful\r\n");
 8000a46:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <RTC_AlarmConfig+0x70>)
 8000a48:	f7ff fdcc 	bl	80005e4 <printmsg>
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000c0 	.word	0x200000c0
 8000a58:	080042e8 	.word	0x080042e8

08000a5c <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	printmsg("Alarm Triggered \r\n");
 8000a64:	4817      	ldr	r0, [pc, #92]	@ (8000ac4 <HAL_RTC_AlarmAEventCallback+0x68>)
 8000a66:	f7ff fdbd 	bl	80005e4 <printmsg>

	RTC_TimeTypeDef RTC_TimeRead;

	HAL_RTC_GetTime(hrtc,&RTC_TimeRead,RTC_FORMAT_BIN);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f001 ff07 	bl	8002886 <HAL_RTC_GetTime>

	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000a78:	7b3b      	ldrb	r3, [r7, #12]
 8000a7a:	4619      	mov	r1, r3
			RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000a7e:	461a      	mov	r2, r3
			RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000a82:	4811      	ldr	r0, [pc, #68]	@ (8000ac8 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8000a84:	f7ff fdae 	bl	80005e4 <printmsg>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	480f      	ldr	r0, [pc, #60]	@ (8000acc <HAL_RTC_AlarmAEventCallback+0x70>)
 8000a8e:	f000 fc99 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <HAL_RTC_AlarmAEventCallback+0x70>)
 8000a9a:	f000 fc93 	bl	80013c4 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8000a9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000aa2:	f000 f99b 	bl	8000ddc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	4808      	ldr	r0, [pc, #32]	@ (8000acc <HAL_RTC_AlarmAEventCallback+0x70>)
 8000aac:	f000 fc8a 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_RTC_AlarmAEventCallback+0x70>)
 8000ab8:	f000 fc84 	bl	80013c4 <HAL_GPIO_WritePin>
}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	08004300 	.word	0x08004300
 8000ac8:	0800429c 	.word	0x0800429c
 8000acc:	40020000 	.word	0x40020000

08000ad0 <Error_handler>:

void Error_handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	while(1);
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_handler+0x4>

08000ad8 <HAL_MspInit>:
#include "stm32f4xx_hal.h"

extern void Error_handler(void);

void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 fa71 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_MspInit+0x40>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <HAL_MspInit+0x40>)
 8000ae8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000aec:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	f06f 000b 	mvn.w	r0, #11
 8000af6:	f000 fa70 	bl	8000fda <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	f06f 000a 	mvn.w	r0, #10
 8000b02:	f000 fa6a 	bl	8000fda <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f06f 0009 	mvn.w	r0, #9
 8000b0e:	f000 fa64 	bl	8000fda <HAL_NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_UART_MspInit>:



 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b78:	f000 fa90 	bl	800109c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b88:	f000 fa88 	bl	800109c <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	2026      	movs	r0, #38	@ 0x26
 8000b8e:	f000 fa40 	bl	8001012 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2026      	movs	r0, #38	@ 0x26
 8000b98:	f000 fa1f 	bl	8000fda <HAL_NVIC_SetPriority>
}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_RTC_MspInit>:


  void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0a6      	sub	sp, #152	@ 0x98
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	  RCC_OscInitTypeDef        RCC_OscInitStruct;

	  RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;

	  //1. Turn on the LSE
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	667b      	str	r3, [r7, #100]	@ 0x64
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 faa3 	bl	8002110 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_RTC_MspInit+0x28>
	  {
		  Error_handler();
 8000bd0:	f7ff ff7e 	bl	8000ad0 <Error_handler>
	  }

	  //2. select LSE as RTCCLK
	  RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	60bb      	str	r3, [r7, #8]
	  RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
	  if( HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit)!= HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fd3a 	bl	800165c <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_RTC_MspInit+0x46>
	  {
		  Error_handler();
 8000bee:	f7ff ff6f 	bl	8000ad0 <Error_handler>
	  }

	  //3. Enable the RTC Clock
	  __HAL_RCC_RTC_ENABLE();
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <HAL_RTC_MspInit+0x64>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

	  //4. Enable the RTC Alarm IRQ in the NVIC
	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn,15,0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	2029      	movs	r0, #41	@ 0x29
 8000bfe:	f000 f9ec 	bl	8000fda <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c02:	2029      	movs	r0, #41	@ 0x29
 8000c04:	f000 fa05 	bl	8001012 <HAL_NVIC_EnableIRQ>
 }
 8000c08:	bf00      	nop
 8000c0a:	3798      	adds	r7, #152	@ 0x98
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	42470e3c 	.word	0x42470e3c

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f002 fe64 	bl	8003910 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200000e0 	.word	0x200000e0
 8000c7c:	20000230 	.word	0x20000230

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 fe23 	bl	800391c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fcab 	bl	8000630 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ce8:	08004370 	.word	0x08004370
  ldr r2, =_sbss
 8000cec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cf0:	20000230 	.word	0x20000230

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f94f 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fed4 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f967 	bl	800102e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f92f 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	@ (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200000e4 	.word	0x200000e4

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000e4 	.word	0x200000e4

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d106      	bne.n	8001064 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001062:	e005      	b.n	8001070 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800106a:	f023 0304 	bic.w	r3, r3, #4
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001084:	f000 f802 	bl	800108c <HAL_SYSTICK_Callback>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e165      	b.n	8001384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8154 	bne.w	800137e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d130      	bne.n	8001150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80ae 	beq.w	800137e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b5d      	ldr	r3, [pc, #372]	@ (800139c <HAL_GPIO_Init+0x300>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a5c      	ldr	r2, [pc, #368]	@ (800139c <HAL_GPIO_Init+0x300>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b5a      	ldr	r3, [pc, #360]	@ (800139c <HAL_GPIO_Init+0x300>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a58      	ldr	r2, [pc, #352]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	@ (80013a4 <HAL_GPIO_Init+0x308>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	@ (80013a8 <HAL_GPIO_Init+0x30c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x216>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4d      	ldr	r2, [pc, #308]	@ (80013ac <HAL_GPIO_Init+0x310>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x212>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4c      	ldr	r2, [pc, #304]	@ (80013b0 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4b      	ldr	r2, [pc, #300]	@ (80013b4 <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x20a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4a      	ldr	r2, [pc, #296]	@ (80013b8 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x206>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a49      	ldr	r2, [pc, #292]	@ (80013bc <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x202>
 800129a:	2306      	movs	r3, #6
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4935      	ldr	r1, [pc, #212]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a31      	ldr	r2, [pc, #196]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a26      	ldr	r2, [pc, #152]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132a:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134e:	4a1c      	ldr	r2, [pc, #112]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001378:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_GPIO_Init+0x324>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f ae96 	bls.w	80010b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3724      	adds	r7, #36	@ 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40021800 	.word	0x40021800
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff faaa 	bl	8000970 <HAL_GPIO_EXTI_Callback>
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0cc      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b68      	ldr	r3, [pc, #416]	@ (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d90c      	bls.n	8001464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b65      	ldr	r3, [pc, #404]	@ (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b63      	ldr	r3, [pc, #396]	@ (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0b8      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d020      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800147c:	4b59      	ldr	r3, [pc, #356]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a58      	ldr	r2, [pc, #352]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001494:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a52      	ldr	r2, [pc, #328]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800149e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a0:	4b50      	ldr	r3, [pc, #320]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	494d      	ldr	r1, [pc, #308]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d044      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d119      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e07f      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06f      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e067      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4934      	ldr	r1, [pc, #208]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff fc54 	bl	8000dc4 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7ff fc50 	bl	8000dc4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e04f      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d20c      	bcs.n	8001570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d001      	beq.n	8001570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e032      	b.n	80015d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4916      	ldr	r1, [pc, #88]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d009      	beq.n	80015ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	490e      	ldr	r1, [pc, #56]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ae:	f000 fb7f 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 80015b2:	4602      	mov	r2, r0
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	490a      	ldr	r1, [pc, #40]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	5ccb      	ldrb	r3, [r1, r3]
 80015c2:	fa22 f303 	lsr.w	r3, r2, r3
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fbb4 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	08004314 	.word	0x08004314
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <HAL_RCC_GetHCLKFreq+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001610:	f7ff fff0 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	0a9b      	lsrs	r3, r3, #10
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	4903      	ldr	r1, [pc, #12]	@ (8001630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	08004324 	.word	0x08004324

08001634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001638:	f7ff ffdc 	bl	80015f4 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	0b5b      	lsrs	r3, r3, #13
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	@ (8001658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	08004324 	.word	0x08004324

0800165c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d010      	beq.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001694:	4b6f      	ldr	r3, [pc, #444]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a2:	496c      	ldr	r1, [pc, #432]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d010      	beq.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80016c2:	4b64      	ldr	r3, [pc, #400]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d0:	4960      	ldr	r1, [pc, #384]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d017      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016f0:	4b58      	ldr	r3, [pc, #352]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4955      	ldr	r1, [pc, #340]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001700:	4313      	orrs	r3, r2
 8001702:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800170e:	d101      	bne.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001710:	2301      	movs	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d017      	beq.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800172c:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800172e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001732:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173a:	4946      	ldr	r1, [pc, #280]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800173c:	4313      	orrs	r3, r2
 800173e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174a:	d101      	bne.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800174c:	2301      	movs	r3, #1
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001758:	2301      	movs	r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 808a 	beq.w	800187e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a38      	ldr	r2, [pc, #224]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001786:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	@ (8001858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001792:	f7ff fb17 	bl	8000dc4 <HAL_GetTick>
 8001796:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fb13 	bl	8000dc4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e278      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017b8:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017c0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d02f      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d028      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d114      	bne.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fae1 	bl	8000dc4 <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fadd 	bl	8000dc4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e240      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ee      	beq.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001834:	d114      	bne.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001836:	4b07      	ldr	r3, [pc, #28]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800184a:	4902      	ldr	r1, [pc, #8]	@ (8001854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
 8001850:	e00c      	b.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000
 800185c:	42470e40 	.word	0x42470e40
 8001860:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a49      	ldr	r2, [pc, #292]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001866:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800186a:	6093      	str	r3, [r2, #8]
 800186c:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800186e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	4944      	ldr	r1, [pc, #272]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800187a:	4313      	orrs	r3, r2
 800187c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001892:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00a      	beq.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80018a0:	4b3a      	ldr	r3, [pc, #232]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4937      	ldr	r1, [pc, #220]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00a      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018c2:	4b32      	ldr	r3, [pc, #200]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018d0:	492e      	ldr	r1, [pc, #184]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d011      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018e4:	4b29      	ldr	r3, [pc, #164]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ea:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f2:	4926      	ldr	r1, [pc, #152]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001902:	d101      	bne.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001904:	2301      	movs	r3, #1
 8001906:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800191a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	491a      	ldr	r1, [pc, #104]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001932:	2b00      	cmp	r3, #0
 8001934:	d011      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001944:	4911      	ldr	r1, [pc, #68]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001946:	4313      	orrs	r3, r2
 8001948:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001954:	d101      	bne.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001956:	2301      	movs	r3, #1
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001968:	f040 80ff 	bne.w	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001972:	f7ff fa27 	bl	8000dc4 <HAL_GetTick>
 8001976:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001978:	e00e      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800197a:	f7ff fa23 	bl	8000dc4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e188      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800198c:	40023800 	.word	0x40023800
 8001990:	424711e0 	.word	0x424711e0
 8001994:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001998:	4b7e      	ldr	r3, [pc, #504]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ea      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d009      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d028      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d124      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019cc:	4b71      	ldr	r3, [pc, #452]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	3301      	adds	r3, #1
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019de:	4b6d      	ldr	r3, [pc, #436]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019e4:	0e1b      	lsrs	r3, r3, #24
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	019b      	lsls	r3, r3, #6
 80019f6:	431a      	orrs	r2, r3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	431a      	orrs	r2, r3
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	071b      	lsls	r3, r3, #28
 8001a0e:	4961      	ldr	r1, [pc, #388]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a2a:	d00a      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d035      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a40:	d130      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a42:	4b54      	ldr	r3, [pc, #336]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a54:	4b4f      	ldr	r3, [pc, #316]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a5a:	0f1b      	lsrs	r3, r3, #28
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	019b      	lsls	r3, r3, #6
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	071b      	lsls	r3, r3, #28
 8001a84:	4943      	ldr	r1, [pc, #268]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a8c:	4b41      	ldr	r3, [pc, #260]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a92:	f023 021f 	bic.w	r2, r3, #31
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	493d      	ldr	r1, [pc, #244]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d029      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ab8:	d124      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aba:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001acc:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ad2:	0f1b      	lsrs	r3, r3, #28
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	019b      	lsls	r3, r3, #6
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	431a      	orrs	r2, r3
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	071b      	lsls	r3, r3, #28
 8001afc:	4925      	ldr	r1, [pc, #148]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d016      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	3b01      	subs	r3, #1
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	071b      	lsls	r3, r3, #28
 8001b36:	4917      	ldr	r1, [pc, #92]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b44:	f7ff f93e 	bl	8000dc4 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b4c:	f7ff f93a 	bl	8000dc4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e09f      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 8095 	bne.w	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f924 	bl	8000dc4 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b80:	f7ff f920 	bl	8000dc4 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e085      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	42470068 	.word	0x42470068
 8001b9c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ba0:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bac:	d0e8      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d02b      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d127      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001bd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	3301      	adds	r3, #1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	019b      	lsls	r3, r3, #6
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	061b      	lsls	r3, r3, #24
 8001c04:	4928      	ldr	r1, [pc, #160]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c12:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	4922      	ldr	r1, [pc, #136]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01d      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c42:	0e1b      	lsrs	r3, r3, #24
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	4910      	ldr	r1, [pc, #64]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff f8a6 	bl	8000dc4 <HAL_GetTick>
 8001c78:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c7c:	f7ff f8a2 	bl	8000dc4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e007      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c9a:	d1ef      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3730      	adds	r7, #48	@ 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	42470070 	.word	0x42470070

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b0ae      	sub	sp, #184	@ 0xb8
 8001cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd6:	4bcb      	ldr	r3, [pc, #812]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	f200 8206 	bhi.w	80020f0 <HAL_RCC_GetSysClockFreq+0x440>
 8001ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	080020f1 	.word	0x080020f1
 8001cf4:	080020f1 	.word	0x080020f1
 8001cf8:	080020f1 	.word	0x080020f1
 8001cfc:	08001d29 	.word	0x08001d29
 8001d00:	080020f1 	.word	0x080020f1
 8001d04:	080020f1 	.word	0x080020f1
 8001d08:	080020f1 	.word	0x080020f1
 8001d0c:	08001d31 	.word	0x08001d31
 8001d10:	080020f1 	.word	0x080020f1
 8001d14:	080020f1 	.word	0x080020f1
 8001d18:	080020f1 	.word	0x080020f1
 8001d1c:	08001f21 	.word	0x08001f21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4bb9      	ldr	r3, [pc, #740]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001d26:	e1e7      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4bb8      	ldr	r3, [pc, #736]	@ (800200c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d2e:	e1e3      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d30:	4bb4      	ldr	r3, [pc, #720]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d071      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d48:	4bae      	ldr	r3, [pc, #696]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d6e:	4622      	mov	r2, r4
 8001d70:	462b      	mov	r3, r5
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	0159      	lsls	r1, r3, #5
 8001d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d80:	0150      	lsls	r0, r2, #5
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4621      	mov	r1, r4
 8001d88:	1a51      	subs	r1, r2, r1
 8001d8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001da0:	4649      	mov	r1, r9
 8001da2:	018b      	lsls	r3, r1, #6
 8001da4:	4641      	mov	r1, r8
 8001da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001daa:	4641      	mov	r1, r8
 8001dac:	018a      	lsls	r2, r1, #6
 8001dae:	4641      	mov	r1, r8
 8001db0:	1a51      	subs	r1, r2, r1
 8001db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001db4:	4649      	mov	r1, r9
 8001db6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001dc8:	4649      	mov	r1, r9
 8001dca:	00cb      	lsls	r3, r1, #3
 8001dcc:	4641      	mov	r1, r8
 8001dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dd2:	4641      	mov	r1, r8
 8001dd4:	00ca      	lsls	r2, r1, #3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4622      	mov	r2, r4
 8001dde:	189b      	adds	r3, r3, r2
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de2:	462b      	mov	r3, r5
 8001de4:	460a      	mov	r2, r1
 8001de6:	eb42 0303 	adc.w	r3, r2, r3
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001df8:	4629      	mov	r1, r5
 8001dfa:	024b      	lsls	r3, r1, #9
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e02:	4621      	mov	r1, r4
 8001e04:	024a      	lsls	r2, r1, #9
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e1c:	f7fe fa50 	bl	80002c0 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e2a:	e067      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2c:	4b75      	ldr	r3, [pc, #468]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e46:	2300      	movs	r3, #0
 8001e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	0159      	lsls	r1, r3, #5
 8001e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e60:	0150      	lsls	r0, r2, #5
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4621      	mov	r1, r4
 8001e68:	1a51      	subs	r1, r2, r1
 8001e6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e80:	4649      	mov	r1, r9
 8001e82:	018b      	lsls	r3, r1, #6
 8001e84:	4641      	mov	r1, r8
 8001e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	018a      	lsls	r2, r1, #6
 8001e8e:	4641      	mov	r1, r8
 8001e90:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e94:	4649      	mov	r1, r9
 8001e96:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eae:	4692      	mov	sl, r2
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8001eb8:	623b      	str	r3, [r7, #32]
 8001eba:	462b      	mov	r3, r5
 8001ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	028b      	lsls	r3, r1, #10
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed8:	4621      	mov	r1, r4
 8001eda:	028a      	lsls	r2, r1, #10
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ee8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001eee:	f7fe f9e7 	bl	80002c0 <__aeabi_uldivmod>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001efc:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f1e:	e0eb      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f20:	4b38      	ldr	r3, [pc, #224]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f2c:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d06b      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f38:	4b32      	ldr	r3, [pc, #200]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	2200      	movs	r2, #0
 8001f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f54:	4622      	mov	r2, r4
 8001f56:	462b      	mov	r3, r5
 8001f58:	f04f 0000 	mov.w	r0, #0
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	0159      	lsls	r1, r3, #5
 8001f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f66:	0150      	lsls	r0, r2, #5
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	1a51      	subs	r1, r2, r1
 8001f70:	61b9      	str	r1, [r7, #24]
 8001f72:	4629      	mov	r1, r5
 8001f74:	eb63 0301 	sbc.w	r3, r3, r1
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f86:	4659      	mov	r1, fp
 8001f88:	018b      	lsls	r3, r1, #6
 8001f8a:	4651      	mov	r1, sl
 8001f8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f90:	4651      	mov	r1, sl
 8001f92:	018a      	lsls	r2, r1, #6
 8001f94:	4651      	mov	r1, sl
 8001f96:	ebb2 0801 	subs.w	r8, r2, r1
 8001f9a:	4659      	mov	r1, fp
 8001f9c:	eb63 0901 	sbc.w	r9, r3, r1
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fb4:	4690      	mov	r8, r2
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	4623      	mov	r3, r4
 8001fba:	eb18 0303 	adds.w	r3, r8, r3
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	eb49 0303 	adc.w	r3, r9, r3
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	024b      	lsls	r3, r1, #9
 8001fd8:	4621      	mov	r1, r4
 8001fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fde:	4621      	mov	r1, r4
 8001fe0:	024a      	lsls	r2, r1, #9
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fea:	2200      	movs	r2, #0
 8001fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ff4:	f7fe f964 	bl	80002c0 <__aeabi_uldivmod>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002002:	e065      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x420>
 8002004:	40023800 	.word	0x40023800
 8002008:	00f42400 	.word	0x00f42400
 800200c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x458>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	4618      	mov	r0, r3
 800201a:	4611      	mov	r1, r2
 800201c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002020:	653b      	str	r3, [r7, #80]	@ 0x50
 8002022:	2300      	movs	r3, #0
 8002024:	657b      	str	r3, [r7, #84]	@ 0x54
 8002026:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800202a:	4642      	mov	r2, r8
 800202c:	464b      	mov	r3, r9
 800202e:	f04f 0000 	mov.w	r0, #0
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	0159      	lsls	r1, r3, #5
 8002038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203c:	0150      	lsls	r0, r2, #5
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4641      	mov	r1, r8
 8002044:	1a51      	subs	r1, r2, r1
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	4649      	mov	r1, r9
 800204a:	eb63 0301 	sbc.w	r3, r3, r1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800205c:	4659      	mov	r1, fp
 800205e:	018b      	lsls	r3, r1, #6
 8002060:	4651      	mov	r1, sl
 8002062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002066:	4651      	mov	r1, sl
 8002068:	018a      	lsls	r2, r1, #6
 800206a:	4651      	mov	r1, sl
 800206c:	1a54      	subs	r4, r2, r1
 800206e:	4659      	mov	r1, fp
 8002070:	eb63 0501 	sbc.w	r5, r3, r1
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	00eb      	lsls	r3, r5, #3
 800207e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002082:	00e2      	lsls	r2, r4, #3
 8002084:	4614      	mov	r4, r2
 8002086:	461d      	mov	r5, r3
 8002088:	4643      	mov	r3, r8
 800208a:	18e3      	adds	r3, r4, r3
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	464b      	mov	r3, r9
 8002090:	eb45 0303 	adc.w	r3, r5, r3
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a2:	4629      	mov	r1, r5
 80020a4:	028b      	lsls	r3, r1, #10
 80020a6:	4621      	mov	r1, r4
 80020a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020ac:	4621      	mov	r1, r4
 80020ae:	028a      	lsls	r2, r1, #10
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020b8:	2200      	movs	r2, #0
 80020ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80020be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020c2:	f7fe f8fd 	bl	80002c0 <__aeabi_uldivmod>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4613      	mov	r3, r2
 80020cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x458>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0f1b      	lsrs	r3, r3, #28
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80020de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020ee:	e003      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_GetSysClockFreq+0x45c>)
 80020f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	37b8      	adds	r7, #184	@ 0xb8
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	00f42400 	.word	0x00f42400

08002110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e28d      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8083 	beq.w	8002236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002130:	4b94      	ldr	r3, [pc, #592]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b04      	cmp	r3, #4
 800213a:	d019      	beq.n	8002170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800213c:	4b91      	ldr	r3, [pc, #580]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002144:	2b08      	cmp	r3, #8
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002148:	4b8e      	ldr	r3, [pc, #568]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4b8b      	ldr	r3, [pc, #556]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d112      	bne.n	8002188 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b88      	ldr	r3, [pc, #544]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800216e:	d10b      	bne.n	8002188 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	4b84      	ldr	r3, [pc, #528]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <HAL_RCC_OscConfig+0x124>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d157      	bne.n	8002234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e25a      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x90>
 8002192:	4b7c      	ldr	r3, [pc, #496]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7b      	ldr	r2, [pc, #492]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xcc>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0xb4>
 80021aa:	4b76      	ldr	r3, [pc, #472]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a75      	ldr	r2, [pc, #468]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b73      	ldr	r3, [pc, #460]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a72      	ldr	r2, [pc, #456]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xcc>
 80021c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fdee 	bl	8000dc4 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe fdea 	bl	8000dc4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	@ 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e21f      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b61      	ldr	r3, [pc, #388]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xdc>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fdda 	bl	8000dc4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fdd6 	bl	8000dc4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e20b      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b57      	ldr	r3, [pc, #348]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x104>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d06f      	beq.n	8002322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002242:	4b50      	ldr	r3, [pc, #320]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d017      	beq.n	800227e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800224e:	4b4d      	ldr	r3, [pc, #308]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800225a:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x186>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1d3      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4937      	ldr	r1, [pc, #220]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e03a      	b.n	8002322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <HAL_RCC_OscConfig+0x278>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fd83 	bl	8000dc4 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fd7f 	bl	8000dc4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1b4      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4925      	ldr	r1, [pc, #148]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_OscConfig+0x278>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fd62 	bl	8000dc4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe fd5e 	bl	8000dc4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e193      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d036      	beq.n	800239c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002336:	4b15      	ldr	r3, [pc, #84]	@ (800238c <HAL_RCC_OscConfig+0x27c>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe fd42 	bl	8000dc4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fd3e 	bl	8000dc4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e173      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_OscConfig+0x274>)
 8002358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x234>
 8002362:	e01b      	b.n	800239c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002364:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_RCC_OscConfig+0x27c>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7fe fd2b 	bl	8000dc4 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	e00e      	b.n	8002390 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002372:	f7fe fd27 	bl	8000dc4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d907      	bls.n	8002390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e15c      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
 8002384:	40023800 	.word	0x40023800
 8002388:	42470000 	.word	0x42470000
 800238c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b8a      	ldr	r3, [pc, #552]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ea      	bne.n	8002372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8097 	beq.w	80024d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b83      	ldr	r3, [pc, #524]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b7f      	ldr	r3, [pc, #508]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a7e      	ldr	r2, [pc, #504]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b7c      	ldr	r3, [pc, #496]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b79      	ldr	r3, [pc, #484]	@ (80025c0 <HAL_RCC_OscConfig+0x4b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b76      	ldr	r3, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x4b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a75      	ldr	r2, [pc, #468]	@ (80025c0 <HAL_RCC_OscConfig+0x4b0>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fce7 	bl	8000dc4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe fce3 	bl	8000dc4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e118      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b6c      	ldr	r3, [pc, #432]	@ (80025c0 <HAL_RCC_OscConfig+0x4b0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x31e>
 8002420:	4b66      	ldr	r3, [pc, #408]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	4a65      	ldr	r2, [pc, #404]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	@ 0x70
 800242c:	e01c      	b.n	8002468 <HAL_RCC_OscConfig+0x358>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b05      	cmp	r3, #5
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x340>
 8002436:	4b61      	ldr	r3, [pc, #388]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	4a60      	ldr	r2, [pc, #384]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	@ 0x70
 8002442:	4b5e      	ldr	r3, [pc, #376]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a5d      	ldr	r2, [pc, #372]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0x358>
 8002450:	4b5a      	ldr	r3, [pc, #360]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002454:	4a59      	ldr	r2, [pc, #356]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	@ 0x70
 800245c:	4b57      	ldr	r3, [pc, #348]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a56      	ldr	r2, [pc, #344]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d015      	beq.n	800249c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe fca8 	bl	8000dc4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7fe fca4 	bl	8000dc4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0d7      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	4b4b      	ldr	r3, [pc, #300]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ee      	beq.n	8002478 <HAL_RCC_OscConfig+0x368>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fc92 	bl	8000dc4 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe fc8e 	bl	8000dc4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0c1      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ee      	bne.n	80024a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024cc:	4b3b      	ldr	r3, [pc, #236]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	4a3a      	ldr	r2, [pc, #232]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80ad 	beq.w	800263c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e2:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d060      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d145      	bne.n	8002582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b33      	ldr	r3, [pc, #204]	@ (80025c4 <HAL_RCC_OscConfig+0x4b4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fc62 	bl	8000dc4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fc5e 	bl	8000dc4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e093      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	4b29      	ldr	r3, [pc, #164]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	071b      	lsls	r3, r3, #28
 800254e:	491b      	ldr	r1, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_RCC_OscConfig+0x4b4>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fc33 	bl	8000dc4 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fc2f 	bl	8000dc4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e064      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x452>
 8002580:	e05c      	b.n	800263c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_RCC_OscConfig+0x4b4>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fc1c 	bl	8000dc4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fc18 	bl	8000dc4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e04d      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x480>
 80025ae:	e045      	b.n	800263c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e040      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <HAL_RCC_OscConfig+0x538>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d030      	beq.n	8002638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d129      	bne.n	8002638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d122      	bne.n	8002638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025f8:	4013      	ands	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002600:	4293      	cmp	r3, r2
 8002602:	d119      	bne.n	8002638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d10f      	bne.n	8002638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7f5b      	ldrb	r3, [r3, #29]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fa9a 	bl	8000bac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b10      	cmp	r3, #16
 800268a:	d055      	beq.n	8002738 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	22ca      	movs	r2, #202	@ 0xca
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2253      	movs	r2, #83	@ 0x53
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fc61 	bl	8002f64 <RTC_EnterInitMode>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d12c      	bne.n	8002706 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80026ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026be:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6919      	ldr	r1, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	041a      	lsls	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fc68 	bl	8002fd2 <RTC_ExitInitMode>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d110      	bne.n	800272e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	22ff      	movs	r2, #255	@ 0xff
 8002734:	625a      	str	r2, [r3, #36]	@ 0x24
 8002736:	e001      	b.n	800273c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002752:	b590      	push	{r4, r7, lr}
 8002754:	b087      	sub	sp, #28
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	7f1b      	ldrb	r3, [r3, #28]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_RTC_SetTime+0x1c>
 800276a:	2302      	movs	r3, #2
 800276c:	e087      	b.n	800287e <HAL_RTC_SetTime+0x12c>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2202      	movs	r2, #2
 8002778:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d126      	bne.n	80027ce <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fc3f 	bl	800301c <RTC_ByteToBcd2>
 800279e:	4603      	mov	r3, r0
 80027a0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fc38 	bl	800301c <RTC_ByteToBcd2>
 80027ac:	4603      	mov	r3, r0
 80027ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80027b0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	789b      	ldrb	r3, [r3, #2]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fc30 	bl	800301c <RTC_ByteToBcd2>
 80027bc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	78db      	ldrb	r3, [r3, #3]
 80027c6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e018      	b.n	8002800 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027ee:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	78db      	ldrb	r3, [r3, #3]
 80027fa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	22ca      	movs	r2, #202	@ 0xca
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2253      	movs	r2, #83	@ 0x53
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fba7 	bl	8002f64 <RTC_EnterInitMode>
 8002816:	4603      	mov	r3, r0
 8002818:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d120      	bne.n	8002862 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800282a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800282e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800283e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fbba 	bl	8002fd2 <RTC_ExitInitMode>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22ff      	movs	r2, #255	@ 0xff
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]

  return status;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
}
 800287e:	4618      	mov	r0, r3
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}

08002886 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80028b8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80028bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	0d9b      	lsrs	r3, r3, #22
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11a      	bne.n	8002938 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fba6 	bl	8003058 <RTC_Bcd2ToByte>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fb9d 	bl	8003058 <RTC_Bcd2ToByte>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	789b      	ldrb	r3, [r3, #2]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fb94 	bl	8003058 <RTC_Bcd2ToByte>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002942:	b590      	push	{r4, r7, lr}
 8002944:	b087      	sub	sp, #28
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	7f1b      	ldrb	r3, [r3, #28]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_RTC_SetDate+0x1c>
 800295a:	2302      	movs	r3, #2
 800295c:	e071      	b.n	8002a42 <HAL_RTC_SetDate+0x100>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2202      	movs	r2, #2
 8002968:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10e      	bne.n	800298e <HAL_RTC_SetDate+0x4c>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	785b      	ldrb	r3, [r3, #1]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	f023 0310 	bic.w	r3, r3, #16
 8002984:	b2db      	uxtb	r3, r3
 8002986:	330a      	adds	r3, #10
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11c      	bne.n	80029ce <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fb3f 	bl	800301c <RTC_ByteToBcd2>
 800299e:	4603      	mov	r3, r0
 80029a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fb38 	bl	800301c <RTC_ByteToBcd2>
 80029ac:	4603      	mov	r3, r0
 80029ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fb30 	bl	800301c <RTC_ByteToBcd2>
 80029bc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029be:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	e00e      	b.n	80029ec <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	78db      	ldrb	r3, [r3, #3]
 80029d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	22ca      	movs	r2, #202	@ 0xca
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2253      	movs	r2, #83	@ 0x53
 80029fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fab1 	bl	8002f64 <RTC_EnterInitMode>
 8002a02:	4603      	mov	r3, r0
 8002a04:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a1a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fad8 	bl	8002fd2 <RTC_ExitInitMode>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ff      	movs	r2, #255	@ 0xff
 8002a38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]

  return status;
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}

08002a4a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a68:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	0b5b      	lsrs	r3, r3, #13
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11a      	bne.n	8002ade <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fad3 	bl	8003058 <RTC_Bcd2ToByte>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	785b      	ldrb	r3, [r3, #1]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 faca 	bl	8003058 <RTC_Bcd2ToByte>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fac1 	bl	8003058 <RTC_Bcd2ToByte>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002af4:	4b9b      	ldr	r3, [pc, #620]	@ (8002d64 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a9b      	ldr	r2, [pc, #620]	@ (8002d68 <HAL_RTC_SetAlarm_IT+0x280>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0adb      	lsrs	r3, r3, #11
 8002b00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	7f1b      	ldrb	r3, [r3, #28]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_RTC_SetAlarm_IT+0x36>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e11e      	b.n	8002d5c <HAL_RTC_SetAlarm_IT+0x274>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2202      	movs	r2, #2
 8002b28:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d137      	bne.n	8002ba0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fa67 	bl	800301c <RTC_ByteToBcd2>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fa60 	bl	800301c <RTC_ByteToBcd2>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002b60:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	789b      	ldrb	r3, [r3, #2]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa58 	bl	800301c <RTC_ByteToBcd2>
 8002b6c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	78db      	ldrb	r3, [r3, #3]
 8002b76:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002b78:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fa4a 	bl	800301c <RTC_ByteToBcd2>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002b8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002b94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e023      	b.n	8002be8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	785b      	ldrb	r3, [r3, #1]
 8002bbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002bc0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002bc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	78db      	ldrb	r3, [r3, #3]
 8002bcc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002bce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002bd8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002bde:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	22ca      	movs	r2, #202	@ 0xca
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2253      	movs	r2, #83	@ 0x53
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c0c:	d142      	bne.n	8002c94 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c1c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002c2e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	22ff      	movs	r2, #255	@ 0xff
 8002c42:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2203      	movs	r2, #3
 8002c48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e083      	b.n	8002d5c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0e6      	beq.n	8002c30 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c80:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	e04c      	b.n	8002d2e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ca2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002cb4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <HAL_RTC_SetAlarm_IT+0x280>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	0adb      	lsrs	r3, r3, #11
 8002cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	22ff      	movs	r2, #255	@ 0xff
 8002cde:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e035      	b.n	8002d5c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0e6      	beq.n	8002ccc <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d2c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <HAL_RTC_SetAlarm_IT+0x284>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0e      	ldr	r2, [pc, #56]	@ (8002d6c <HAL_RTC_SetAlarm_IT+0x284>)
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d38:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <HAL_RTC_SetAlarm_IT+0x284>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <HAL_RTC_SetAlarm_IT+0x284>)
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d44:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	22ff      	movs	r2, #255	@ 0xff
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3724      	adds	r7, #36	@ 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}
 8002d64:	20000000 	.word	0x20000000
 8002d68:	10624dd3 	.word	0x10624dd3
 8002d6c:	40013c00 	.word	0x40013c00

08002d70 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7f1b      	ldrb	r3, [r3, #28]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_RTC_DeactivateAlarm+0x1a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e07b      	b.n	8002e82 <HAL_RTC_DeactivateAlarm+0x112>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	22ca      	movs	r2, #202	@ 0xca
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2253      	movs	r2, #83	@ 0x53
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dac:	d12f      	bne.n	8002e0e <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dbc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dcc:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dce:	f7fd fff9 	bl	8000dc4 <HAL_GetTick>
 8002dd2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002dd4:	e013      	b.n	8002dfe <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dd6:	f7fd fff5 	bl	8000dc4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002de4:	d90b      	bls.n	8002dfe <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	22ff      	movs	r2, #255	@ 0xff
 8002dec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e041      	b.n	8002e82 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0e4      	beq.n	8002dd6 <HAL_RTC_DeactivateAlarm+0x66>
 8002e0c:	e02e      	b.n	8002e6c <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e1c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e2e:	f7fd ffc9 	bl	8000dc4 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002e34:	e013      	b.n	8002e5e <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e36:	f7fd ffc5 	bl	8000dc4 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e44:	d90b      	bls.n	8002e5e <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	22ff      	movs	r2, #255	@ 0xff
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e011      	b.n	8002e82 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0e4      	beq.n	8002e36 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	22ff      	movs	r2, #255	@ 0xff
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002e96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e9a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002ec8:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fdc6 	bl	8000a5c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8002efc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8c8 	bl	8003094 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	775a      	strb	r2, [r3, #29]
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <HAL_RTC_WaitForSynchro+0x48>)
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f2c:	f7fd ff4a 	bl	8000dc4 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f32:	e009      	b.n	8002f48 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f34:	f7fd ff46 	bl	8000dc4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f42:	d901      	bls.n	8002f48 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e007      	b.n	8002f58 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ee      	beq.n	8002f34 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	00017f5f 	.word	0x00017f5f

08002f64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d122      	bne.n	8002fc8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f92:	f7fd ff17 	bl	8000dc4 <HAL_GetTick>
 8002f96:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f98:	e00c      	b.n	8002fb4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f9a:	f7fd ff13 	bl	8000dc4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fa8:	d904      	bls.n	8002fb4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2204      	movs	r2, #4
 8002fae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <RTC_EnterInitMode+0x64>
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d1e8      	bne.n	8002f9a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff8b 	bl	8002f18 <HAL_RTC_WaitForSynchro>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2204      	movs	r2, #4
 800300c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800302a:	e005      	b.n	8003038 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	3b0a      	subs	r3, #10
 8003036:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b09      	cmp	r3, #9
 800303c:	d8f6      	bhi.n	800302c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	b2da      	uxtb	r2, r3
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	4313      	orrs	r3, r2
 800304a:	b2db      	uxtb	r3, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4413      	add	r3, r2
 8003086:	b2db      	uxtb	r3, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e042      	b.n	8003140 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fd24 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	@ 0x24
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f973 	bl	80033d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	@ 0x28
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b20      	cmp	r3, #32
 8003166:	d175      	bne.n	8003254 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Transmit+0x2c>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e06e      	b.n	8003256 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2221      	movs	r2, #33	@ 0x21
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003186:	f7fd fe1d 	bl	8000dc4 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a0:	d108      	bne.n	80031b4 <HAL_UART_Transmit+0x6c>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e003      	b.n	80031bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031bc:	e02e      	b.n	800321c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2180      	movs	r1, #128	@ 0x80
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f848 	bl	800325e <UART_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e03a      	b.n	8003256 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	3302      	adds	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e007      	b.n	800320e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	3301      	adds	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1cb      	bne.n	80031be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	2140      	movs	r1, #64	@ 0x40
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f814 	bl	800325e <UART_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e006      	b.n	8003256 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326e:	e03b      	b.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d037      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003278:	f7fd fda4 	bl	8000dc4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	429a      	cmp	r2, r3
 8003286:	d302      	bcc.n	800328e <UART_WaitOnFlagUntilTimeout+0x30>
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e03a      	b.n	8003308 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d023      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b80      	cmp	r3, #128	@ 0x80
 80032a4:	d020      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b40      	cmp	r3, #64	@ 0x40
 80032aa:	d01d      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d116      	bne.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f81d 	bl	8003310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2208      	movs	r2, #8
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e00f      	b.n	8003308 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	429a      	cmp	r2, r3
 8003304:	d0b4      	beq.n	8003270 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b095      	sub	sp, #84	@ 0x54
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800332e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003338:	643a      	str	r2, [r7, #64]	@ 0x40
 800333a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800333e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e5      	bne.n	8003318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	61fb      	str	r3, [r7, #28]
   return(result);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800336c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e5      	bne.n	800334c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	2b01      	cmp	r3, #1
 8003386:	d119      	bne.n	80033bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	60bb      	str	r3, [r7, #8]
   return(result);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f023 0310 	bic.w	r3, r3, #16
 800339e:	647b      	str	r3, [r7, #68]	@ 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033a8:	61ba      	str	r2, [r7, #24]
 80033aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6979      	ldr	r1, [r7, #20]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	613b      	str	r3, [r7, #16]
   return(result);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e5      	bne.n	8003388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033ca:	bf00      	nop
 80033cc:	3754      	adds	r7, #84	@ 0x54
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b0c0      	sub	sp, #256	@ 0x100
 80033de:	af00      	add	r7, sp, #0
 80033e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f4:	68d9      	ldr	r1, [r3, #12]
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	ea40 0301 	orr.w	r3, r0, r1
 8003400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	431a      	orrs	r2, r3
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	431a      	orrs	r2, r3
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003430:	f021 010c 	bic.w	r1, r1, #12
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800343e:	430b      	orrs	r3, r1
 8003440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	6999      	ldr	r1, [r3, #24]
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	ea40 0301 	orr.w	r3, r0, r1
 800345e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b8f      	ldr	r3, [pc, #572]	@ (80036a4 <UART_SetConfig+0x2cc>)
 8003468:	429a      	cmp	r2, r3
 800346a:	d005      	beq.n	8003478 <UART_SetConfig+0xa0>
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b8d      	ldr	r3, [pc, #564]	@ (80036a8 <UART_SetConfig+0x2d0>)
 8003474:	429a      	cmp	r2, r3
 8003476:	d104      	bne.n	8003482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003478:	f7fe f8dc 	bl	8001634 <HAL_RCC_GetPCLK2Freq>
 800347c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003480:	e003      	b.n	800348a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003482:	f7fe f8c3 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 8003486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003494:	f040 810c 	bne.w	80036b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800349c:	2200      	movs	r2, #0
 800349e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034aa:	4622      	mov	r2, r4
 80034ac:	462b      	mov	r3, r5
 80034ae:	1891      	adds	r1, r2, r2
 80034b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034b2:	415b      	adcs	r3, r3
 80034b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034ba:	4621      	mov	r1, r4
 80034bc:	eb12 0801 	adds.w	r8, r2, r1
 80034c0:	4629      	mov	r1, r5
 80034c2:	eb43 0901 	adc.w	r9, r3, r1
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034da:	4690      	mov	r8, r2
 80034dc:	4699      	mov	r9, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	eb18 0303 	adds.w	r3, r8, r3
 80034e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034e8:	462b      	mov	r3, r5
 80034ea:	eb49 0303 	adc.w	r3, r9, r3
 80034ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003506:	460b      	mov	r3, r1
 8003508:	18db      	adds	r3, r3, r3
 800350a:	653b      	str	r3, [r7, #80]	@ 0x50
 800350c:	4613      	mov	r3, r2
 800350e:	eb42 0303 	adc.w	r3, r2, r3
 8003512:	657b      	str	r3, [r7, #84]	@ 0x54
 8003514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800351c:	f7fc fed0 	bl	80002c0 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4b61      	ldr	r3, [pc, #388]	@ (80036ac <UART_SetConfig+0x2d4>)
 8003526:	fba3 2302 	umull	r2, r3, r3, r2
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	011c      	lsls	r4, r3, #4
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800353c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	1891      	adds	r1, r2, r2
 8003546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003548:	415b      	adcs	r3, r3
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800354c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003550:	4641      	mov	r1, r8
 8003552:	eb12 0a01 	adds.w	sl, r2, r1
 8003556:	4649      	mov	r1, r9
 8003558:	eb43 0b01 	adc.w	fp, r3, r1
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800356c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003570:	4692      	mov	sl, r2
 8003572:	469b      	mov	fp, r3
 8003574:	4643      	mov	r3, r8
 8003576:	eb1a 0303 	adds.w	r3, sl, r3
 800357a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800357e:	464b      	mov	r3, r9
 8003580:	eb4b 0303 	adc.w	r3, fp, r3
 8003584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800359c:	460b      	mov	r3, r1
 800359e:	18db      	adds	r3, r3, r3
 80035a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a2:	4613      	mov	r3, r2
 80035a4:	eb42 0303 	adc.w	r3, r2, r3
 80035a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035b2:	f7fc fe85 	bl	80002c0 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	4b3b      	ldr	r3, [pc, #236]	@ (80036ac <UART_SetConfig+0x2d4>)
 80035be:	fba3 2301 	umull	r2, r3, r3, r1
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2264      	movs	r2, #100	@ 0x64
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	1acb      	subs	r3, r1, r3
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035d2:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <UART_SetConfig+0x2d4>)
 80035d4:	fba3 2302 	umull	r2, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035e0:	441c      	add	r4, r3
 80035e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035f4:	4642      	mov	r2, r8
 80035f6:	464b      	mov	r3, r9
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035fc:	415b      	adcs	r3, r3
 80035fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003604:	4641      	mov	r1, r8
 8003606:	1851      	adds	r1, r2, r1
 8003608:	6339      	str	r1, [r7, #48]	@ 0x30
 800360a:	4649      	mov	r1, r9
 800360c:	414b      	adcs	r3, r1
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800361c:	4659      	mov	r1, fp
 800361e:	00cb      	lsls	r3, r1, #3
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003626:	4651      	mov	r1, sl
 8003628:	00ca      	lsls	r2, r1, #3
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	4603      	mov	r3, r0
 8003630:	4642      	mov	r2, r8
 8003632:	189b      	adds	r3, r3, r2
 8003634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003638:	464b      	mov	r3, r9
 800363a:	460a      	mov	r2, r1
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003658:	460b      	mov	r3, r1
 800365a:	18db      	adds	r3, r3, r3
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800365e:	4613      	mov	r3, r2
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800366a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800366e:	f7fc fe27 	bl	80002c0 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <UART_SetConfig+0x2d4>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	@ 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	3332      	adds	r3, #50	@ 0x32
 800368a:	4a08      	ldr	r2, [pc, #32]	@ (80036ac <UART_SetConfig+0x2d4>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	f003 0207 	and.w	r2, r3, #7
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4422      	add	r2, r4
 800369e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a0:	e106      	b.n	80038b0 <UART_SetConfig+0x4d8>
 80036a2:	bf00      	nop
 80036a4:	40011000 	.word	0x40011000
 80036a8:	40011400 	.word	0x40011400
 80036ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036c2:	4642      	mov	r2, r8
 80036c4:	464b      	mov	r3, r9
 80036c6:	1891      	adds	r1, r2, r2
 80036c8:	6239      	str	r1, [r7, #32]
 80036ca:	415b      	adcs	r3, r3
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036d2:	4641      	mov	r1, r8
 80036d4:	1854      	adds	r4, r2, r1
 80036d6:	4649      	mov	r1, r9
 80036d8:	eb43 0501 	adc.w	r5, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	00eb      	lsls	r3, r5, #3
 80036e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ea:	00e2      	lsls	r2, r4, #3
 80036ec:	4614      	mov	r4, r2
 80036ee:	461d      	mov	r5, r3
 80036f0:	4643      	mov	r3, r8
 80036f2:	18e3      	adds	r3, r4, r3
 80036f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036f8:	464b      	mov	r3, r9
 80036fa:	eb45 0303 	adc.w	r3, r5, r3
 80036fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800370e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800371e:	4629      	mov	r1, r5
 8003720:	008b      	lsls	r3, r1, #2
 8003722:	4621      	mov	r1, r4
 8003724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003728:	4621      	mov	r1, r4
 800372a:	008a      	lsls	r2, r1, #2
 800372c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003730:	f7fc fdc6 	bl	80002c0 <__aeabi_uldivmod>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4b60      	ldr	r3, [pc, #384]	@ (80038bc <UART_SetConfig+0x4e4>)
 800373a:	fba3 2302 	umull	r2, r3, r3, r2
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	011c      	lsls	r4, r3, #4
 8003742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003746:	2200      	movs	r2, #0
 8003748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800374c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003754:	4642      	mov	r2, r8
 8003756:	464b      	mov	r3, r9
 8003758:	1891      	adds	r1, r2, r2
 800375a:	61b9      	str	r1, [r7, #24]
 800375c:	415b      	adcs	r3, r3
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003764:	4641      	mov	r1, r8
 8003766:	1851      	adds	r1, r2, r1
 8003768:	6139      	str	r1, [r7, #16]
 800376a:	4649      	mov	r1, r9
 800376c:	414b      	adcs	r3, r1
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800377c:	4659      	mov	r1, fp
 800377e:	00cb      	lsls	r3, r1, #3
 8003780:	4651      	mov	r1, sl
 8003782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003786:	4651      	mov	r1, sl
 8003788:	00ca      	lsls	r2, r1, #3
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	4603      	mov	r3, r0
 8003790:	4642      	mov	r2, r8
 8003792:	189b      	adds	r3, r3, r2
 8003794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003798:	464b      	mov	r3, r9
 800379a:	460a      	mov	r2, r1
 800379c:	eb42 0303 	adc.w	r3, r2, r3
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037bc:	4649      	mov	r1, r9
 80037be:	008b      	lsls	r3, r1, #2
 80037c0:	4641      	mov	r1, r8
 80037c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c6:	4641      	mov	r1, r8
 80037c8:	008a      	lsls	r2, r1, #2
 80037ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037ce:	f7fc fd77 	bl	80002c0 <__aeabi_uldivmod>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <UART_SetConfig+0x4e4>)
 80037da:	fba3 2301 	umull	r2, r3, r3, r1
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2264      	movs	r2, #100	@ 0x64
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	1acb      	subs	r3, r1, r3
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	3332      	adds	r3, #50	@ 0x32
 80037ec:	4a33      	ldr	r2, [pc, #204]	@ (80038bc <UART_SetConfig+0x4e4>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037f8:	441c      	add	r4, r3
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037fe:	2200      	movs	r2, #0
 8003800:	673b      	str	r3, [r7, #112]	@ 0x70
 8003802:	677a      	str	r2, [r7, #116]	@ 0x74
 8003804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003808:	4642      	mov	r2, r8
 800380a:	464b      	mov	r3, r9
 800380c:	1891      	adds	r1, r2, r2
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	415b      	adcs	r3, r3
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003818:	4641      	mov	r1, r8
 800381a:	1851      	adds	r1, r2, r1
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	4649      	mov	r1, r9
 8003820:	414b      	adcs	r3, r1
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003830:	4659      	mov	r1, fp
 8003832:	00cb      	lsls	r3, r1, #3
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383a:	4651      	mov	r1, sl
 800383c:	00ca      	lsls	r2, r1, #3
 800383e:	4610      	mov	r0, r2
 8003840:	4619      	mov	r1, r3
 8003842:	4603      	mov	r3, r0
 8003844:	4642      	mov	r2, r8
 8003846:	189b      	adds	r3, r3, r2
 8003848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800384a:	464b      	mov	r3, r9
 800384c:	460a      	mov	r2, r1
 800384e:	eb42 0303 	adc.w	r3, r2, r3
 8003852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	663b      	str	r3, [r7, #96]	@ 0x60
 800385e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800386c:	4649      	mov	r1, r9
 800386e:	008b      	lsls	r3, r1, #2
 8003870:	4641      	mov	r1, r8
 8003872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003876:	4641      	mov	r1, r8
 8003878:	008a      	lsls	r2, r1, #2
 800387a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800387e:	f7fc fd1f 	bl	80002c0 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <UART_SetConfig+0x4e4>)
 8003888:	fba3 1302 	umull	r1, r3, r3, r2
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	2164      	movs	r1, #100	@ 0x64
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	3332      	adds	r3, #50	@ 0x32
 800389a:	4a08      	ldr	r2, [pc, #32]	@ (80038bc <UART_SetConfig+0x4e4>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4422      	add	r2, r4
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	bf00      	nop
 80038b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038b6:	46bd      	mov	sp, r7
 80038b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038bc:	51eb851f 	.word	0x51eb851f

080038c0 <_vsiprintf_r>:
 80038c0:	b500      	push	{lr}
 80038c2:	b09b      	sub	sp, #108	@ 0x6c
 80038c4:	9100      	str	r1, [sp, #0]
 80038c6:	9104      	str	r1, [sp, #16]
 80038c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038cc:	9105      	str	r1, [sp, #20]
 80038ce:	9102      	str	r1, [sp, #8]
 80038d0:	4905      	ldr	r1, [pc, #20]	@ (80038e8 <_vsiprintf_r+0x28>)
 80038d2:	9103      	str	r1, [sp, #12]
 80038d4:	4669      	mov	r1, sp
 80038d6:	f000 f99b 	bl	8003c10 <_svfiprintf_r>
 80038da:	9b00      	ldr	r3, [sp, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	b01b      	add	sp, #108	@ 0x6c
 80038e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038e6:	bf00      	nop
 80038e8:	ffff0208 	.word	0xffff0208

080038ec <vsiprintf>:
 80038ec:	4613      	mov	r3, r2
 80038ee:	460a      	mov	r2, r1
 80038f0:	4601      	mov	r1, r0
 80038f2:	4802      	ldr	r0, [pc, #8]	@ (80038fc <vsiprintf+0x10>)
 80038f4:	6800      	ldr	r0, [r0, #0]
 80038f6:	f7ff bfe3 	b.w	80038c0 <_vsiprintf_r>
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <__errno>:
 8003910:	4b01      	ldr	r3, [pc, #4]	@ (8003918 <__errno+0x8>)
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	2000000c 	.word	0x2000000c

0800391c <__libc_init_array>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4d0d      	ldr	r5, [pc, #52]	@ (8003954 <__libc_init_array+0x38>)
 8003920:	4c0d      	ldr	r4, [pc, #52]	@ (8003958 <__libc_init_array+0x3c>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	2600      	movs	r6, #0
 8003928:	42a6      	cmp	r6, r4
 800392a:	d109      	bne.n	8003940 <__libc_init_array+0x24>
 800392c:	4d0b      	ldr	r5, [pc, #44]	@ (800395c <__libc_init_array+0x40>)
 800392e:	4c0c      	ldr	r4, [pc, #48]	@ (8003960 <__libc_init_array+0x44>)
 8003930:	f000 fc66 	bl	8004200 <_init>
 8003934:	1b64      	subs	r4, r4, r5
 8003936:	10a4      	asrs	r4, r4, #2
 8003938:	2600      	movs	r6, #0
 800393a:	42a6      	cmp	r6, r4
 800393c:	d105      	bne.n	800394a <__libc_init_array+0x2e>
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	f855 3b04 	ldr.w	r3, [r5], #4
 8003944:	4798      	blx	r3
 8003946:	3601      	adds	r6, #1
 8003948:	e7ee      	b.n	8003928 <__libc_init_array+0xc>
 800394a:	f855 3b04 	ldr.w	r3, [r5], #4
 800394e:	4798      	blx	r3
 8003950:	3601      	adds	r6, #1
 8003952:	e7f2      	b.n	800393a <__libc_init_array+0x1e>
 8003954:	08004368 	.word	0x08004368
 8003958:	08004368 	.word	0x08004368
 800395c:	08004368 	.word	0x08004368
 8003960:	0800436c 	.word	0x0800436c

08003964 <__retarget_lock_acquire_recursive>:
 8003964:	4770      	bx	lr

08003966 <__retarget_lock_release_recursive>:
 8003966:	4770      	bx	lr

08003968 <_free_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4605      	mov	r5, r0
 800396c:	2900      	cmp	r1, #0
 800396e:	d041      	beq.n	80039f4 <_free_r+0x8c>
 8003970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003974:	1f0c      	subs	r4, r1, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfb8      	it	lt
 800397a:	18e4      	addlt	r4, r4, r3
 800397c:	f000 f8e0 	bl	8003b40 <__malloc_lock>
 8003980:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <_free_r+0x90>)
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	b933      	cbnz	r3, 8003994 <_free_r+0x2c>
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6014      	str	r4, [r2, #0]
 800398a:	4628      	mov	r0, r5
 800398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003990:	f000 b8dc 	b.w	8003b4c <__malloc_unlock>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d908      	bls.n	80039aa <_free_r+0x42>
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	1821      	adds	r1, r4, r0
 800399c:	428b      	cmp	r3, r1
 800399e:	bf01      	itttt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	1809      	addeq	r1, r1, r0
 80039a6:	6021      	streq	r1, [r4, #0]
 80039a8:	e7ed      	b.n	8003986 <_free_r+0x1e>
 80039aa:	461a      	mov	r2, r3
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b10b      	cbz	r3, 80039b4 <_free_r+0x4c>
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x42>
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	1850      	adds	r0, r2, r1
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x6c>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	4401      	add	r1, r0
 80039c0:	1850      	adds	r0, r2, r1
 80039c2:	4283      	cmp	r3, r0
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	d1e0      	bne.n	800398a <_free_r+0x22>
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	4408      	add	r0, r1
 80039d0:	6010      	str	r0, [r2, #0]
 80039d2:	e7da      	b.n	800398a <_free_r+0x22>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x74>
 80039d6:	230c      	movs	r3, #12
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	e7d6      	b.n	800398a <_free_r+0x22>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	1821      	adds	r1, r4, r0
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6054      	str	r4, [r2, #4]
 80039f2:	e7ca      	b.n	800398a <_free_r+0x22>
 80039f4:	bd38      	pop	{r3, r4, r5, pc}
 80039f6:	bf00      	nop
 80039f8:	2000022c 	.word	0x2000022c

080039fc <sbrk_aligned>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4e0f      	ldr	r6, [pc, #60]	@ (8003a3c <sbrk_aligned+0x40>)
 8003a00:	460c      	mov	r4, r1
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	4605      	mov	r5, r0
 8003a06:	b911      	cbnz	r1, 8003a0e <sbrk_aligned+0x12>
 8003a08:	f000 fba6 	bl	8004158 <_sbrk_r>
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 fba1 	bl	8004158 <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d103      	bne.n	8003a22 <sbrk_aligned+0x26>
 8003a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003a1e:	4620      	mov	r0, r4
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
 8003a22:	1cc4      	adds	r4, r0, #3
 8003a24:	f024 0403 	bic.w	r4, r4, #3
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d0f8      	beq.n	8003a1e <sbrk_aligned+0x22>
 8003a2c:	1a21      	subs	r1, r4, r0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 fb92 	bl	8004158 <_sbrk_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d1f2      	bne.n	8003a1e <sbrk_aligned+0x22>
 8003a38:	e7ef      	b.n	8003a1a <sbrk_aligned+0x1e>
 8003a3a:	bf00      	nop
 8003a3c:	20000228 	.word	0x20000228

08003a40 <_malloc_r>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	1ccd      	adds	r5, r1, #3
 8003a46:	f025 0503 	bic.w	r5, r5, #3
 8003a4a:	3508      	adds	r5, #8
 8003a4c:	2d0c      	cmp	r5, #12
 8003a4e:	bf38      	it	cc
 8003a50:	250c      	movcc	r5, #12
 8003a52:	2d00      	cmp	r5, #0
 8003a54:	4606      	mov	r6, r0
 8003a56:	db01      	blt.n	8003a5c <_malloc_r+0x1c>
 8003a58:	42a9      	cmp	r1, r5
 8003a5a:	d904      	bls.n	8003a66 <_malloc_r+0x26>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	2000      	movs	r0, #0
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b3c <_malloc_r+0xfc>
 8003a6a:	f000 f869 	bl	8003b40 <__malloc_lock>
 8003a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a72:	461c      	mov	r4, r3
 8003a74:	bb44      	cbnz	r4, 8003ac8 <_malloc_r+0x88>
 8003a76:	4629      	mov	r1, r5
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f7ff ffbf 	bl	80039fc <sbrk_aligned>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	4604      	mov	r4, r0
 8003a82:	d158      	bne.n	8003b36 <_malloc_r+0xf6>
 8003a84:	f8d8 4000 	ldr.w	r4, [r8]
 8003a88:	4627      	mov	r7, r4
 8003a8a:	2f00      	cmp	r7, #0
 8003a8c:	d143      	bne.n	8003b16 <_malloc_r+0xd6>
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d04b      	beq.n	8003b2a <_malloc_r+0xea>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	4639      	mov	r1, r7
 8003a96:	4630      	mov	r0, r6
 8003a98:	eb04 0903 	add.w	r9, r4, r3
 8003a9c:	f000 fb5c 	bl	8004158 <_sbrk_r>
 8003aa0:	4581      	cmp	r9, r0
 8003aa2:	d142      	bne.n	8003b2a <_malloc_r+0xea>
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	1a6d      	subs	r5, r5, r1
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff ffa6 	bl	80039fc <sbrk_aligned>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d03a      	beq.n	8003b2a <_malloc_r+0xea>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	442b      	add	r3, r5
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	f8d8 3000 	ldr.w	r3, [r8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	bb62      	cbnz	r2, 8003b1c <_malloc_r+0xdc>
 8003ac2:	f8c8 7000 	str.w	r7, [r8]
 8003ac6:	e00f      	b.n	8003ae8 <_malloc_r+0xa8>
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	1b52      	subs	r2, r2, r5
 8003acc:	d420      	bmi.n	8003b10 <_malloc_r+0xd0>
 8003ace:	2a0b      	cmp	r2, #11
 8003ad0:	d917      	bls.n	8003b02 <_malloc_r+0xc2>
 8003ad2:	1961      	adds	r1, r4, r5
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	6025      	str	r5, [r4, #0]
 8003ad8:	bf18      	it	ne
 8003ada:	6059      	strne	r1, [r3, #4]
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	bf08      	it	eq
 8003ae0:	f8c8 1000 	streq.w	r1, [r8]
 8003ae4:	5162      	str	r2, [r4, r5]
 8003ae6:	604b      	str	r3, [r1, #4]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f82f 	bl	8003b4c <__malloc_unlock>
 8003aee:	f104 000b 	add.w	r0, r4, #11
 8003af2:	1d23      	adds	r3, r4, #4
 8003af4:	f020 0007 	bic.w	r0, r0, #7
 8003af8:	1ac2      	subs	r2, r0, r3
 8003afa:	bf1c      	itt	ne
 8003afc:	1a1b      	subne	r3, r3, r0
 8003afe:	50a3      	strne	r3, [r4, r2]
 8003b00:	e7af      	b.n	8003a62 <_malloc_r+0x22>
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	bf0c      	ite	eq
 8003b08:	f8c8 2000 	streq.w	r2, [r8]
 8003b0c:	605a      	strne	r2, [r3, #4]
 8003b0e:	e7eb      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b10:	4623      	mov	r3, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7ae      	b.n	8003a74 <_malloc_r+0x34>
 8003b16:	463c      	mov	r4, r7
 8003b18:	687f      	ldr	r7, [r7, #4]
 8003b1a:	e7b6      	b.n	8003a8a <_malloc_r+0x4a>
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	42a3      	cmp	r3, r4
 8003b22:	d1fb      	bne.n	8003b1c <_malloc_r+0xdc>
 8003b24:	2300      	movs	r3, #0
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e7de      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f80c 	bl	8003b4c <__malloc_unlock>
 8003b34:	e794      	b.n	8003a60 <_malloc_r+0x20>
 8003b36:	6005      	str	r5, [r0, #0]
 8003b38:	e7d6      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b3a:	bf00      	nop
 8003b3c:	2000022c 	.word	0x2000022c

08003b40 <__malloc_lock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_lock+0x8>)
 8003b42:	f7ff bf0f 	b.w	8003964 <__retarget_lock_acquire_recursive>
 8003b46:	bf00      	nop
 8003b48:	20000224 	.word	0x20000224

08003b4c <__malloc_unlock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <__malloc_unlock+0x8>)
 8003b4e:	f7ff bf0a 	b.w	8003966 <__retarget_lock_release_recursive>
 8003b52:	bf00      	nop
 8003b54:	20000224 	.word	0x20000224

08003b58 <__ssputs_r>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	688e      	ldr	r6, [r1, #8]
 8003b5e:	461f      	mov	r7, r3
 8003b60:	42be      	cmp	r6, r7
 8003b62:	680b      	ldr	r3, [r1, #0]
 8003b64:	4682      	mov	sl, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4690      	mov	r8, r2
 8003b6a:	d82d      	bhi.n	8003bc8 <__ssputs_r+0x70>
 8003b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b74:	d026      	beq.n	8003bc4 <__ssputs_r+0x6c>
 8003b76:	6965      	ldr	r5, [r4, #20]
 8003b78:	6909      	ldr	r1, [r1, #16]
 8003b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b7e:	eba3 0901 	sub.w	r9, r3, r1
 8003b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b86:	1c7b      	adds	r3, r7, #1
 8003b88:	444b      	add	r3, r9
 8003b8a:	106d      	asrs	r5, r5, #1
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	bf38      	it	cc
 8003b90:	461d      	movcc	r5, r3
 8003b92:	0553      	lsls	r3, r2, #21
 8003b94:	d527      	bpl.n	8003be6 <__ssputs_r+0x8e>
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7ff ff52 	bl	8003a40 <_malloc_r>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	b360      	cbz	r0, 8003bfa <__ssputs_r+0xa2>
 8003ba0:	6921      	ldr	r1, [r4, #16]
 8003ba2:	464a      	mov	r2, r9
 8003ba4:	f000 fae8 	bl	8004178 <memcpy>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	6126      	str	r6, [r4, #16]
 8003bb6:	6165      	str	r5, [r4, #20]
 8003bb8:	444e      	add	r6, r9
 8003bba:	eba5 0509 	sub.w	r5, r5, r9
 8003bbe:	6026      	str	r6, [r4, #0]
 8003bc0:	60a5      	str	r5, [r4, #8]
 8003bc2:	463e      	mov	r6, r7
 8003bc4:	42be      	cmp	r6, r7
 8003bc6:	d900      	bls.n	8003bca <__ssputs_r+0x72>
 8003bc8:	463e      	mov	r6, r7
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4641      	mov	r1, r8
 8003bd0:	f000 faa8 	bl	8004124 <memmove>
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	1b9b      	subs	r3, r3, r6
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	4433      	add	r3, r6
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	2000      	movs	r0, #0
 8003be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be6:	462a      	mov	r2, r5
 8003be8:	f000 fad4 	bl	8004194 <_realloc_r>
 8003bec:	4606      	mov	r6, r0
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d1e0      	bne.n	8003bb4 <__ssputs_r+0x5c>
 8003bf2:	6921      	ldr	r1, [r4, #16]
 8003bf4:	4650      	mov	r0, sl
 8003bf6:	f7ff feb7 	bl	8003968 <_free_r>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	f8ca 3000 	str.w	r3, [sl]
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e7e9      	b.n	8003be2 <__ssputs_r+0x8a>
	...

08003c10 <_svfiprintf_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	4698      	mov	r8, r3
 8003c16:	898b      	ldrh	r3, [r1, #12]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	b09d      	sub	sp, #116	@ 0x74
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	460d      	mov	r5, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	d510      	bpl.n	8003c46 <_svfiprintf_r+0x36>
 8003c24:	690b      	ldr	r3, [r1, #16]
 8003c26:	b973      	cbnz	r3, 8003c46 <_svfiprintf_r+0x36>
 8003c28:	2140      	movs	r1, #64	@ 0x40
 8003c2a:	f7ff ff09 	bl	8003a40 <_malloc_r>
 8003c2e:	6028      	str	r0, [r5, #0]
 8003c30:	6128      	str	r0, [r5, #16]
 8003c32:	b930      	cbnz	r0, 8003c42 <_svfiprintf_r+0x32>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	b01d      	add	sp, #116	@ 0x74
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	2340      	movs	r3, #64	@ 0x40
 8003c44:	616b      	str	r3, [r5, #20]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c54:	2330      	movs	r3, #48	@ 0x30
 8003c56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003df4 <_svfiprintf_r+0x1e4>
 8003c5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c5e:	f04f 0901 	mov.w	r9, #1
 8003c62:	4623      	mov	r3, r4
 8003c64:	469a      	mov	sl, r3
 8003c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c6a:	b10a      	cbz	r2, 8003c70 <_svfiprintf_r+0x60>
 8003c6c:	2a25      	cmp	r2, #37	@ 0x25
 8003c6e:	d1f9      	bne.n	8003c64 <_svfiprintf_r+0x54>
 8003c70:	ebba 0b04 	subs.w	fp, sl, r4
 8003c74:	d00b      	beq.n	8003c8e <_svfiprintf_r+0x7e>
 8003c76:	465b      	mov	r3, fp
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f7ff ff6b 	bl	8003b58 <__ssputs_r>
 8003c82:	3001      	adds	r0, #1
 8003c84:	f000 80a7 	beq.w	8003dd6 <_svfiprintf_r+0x1c6>
 8003c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c8a:	445a      	add	r2, fp
 8003c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 809f 	beq.w	8003dd6 <_svfiprintf_r+0x1c6>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ca2:	f10a 0a01 	add.w	sl, sl, #1
 8003ca6:	9304      	str	r3, [sp, #16]
 8003ca8:	9307      	str	r3, [sp, #28]
 8003caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cb0:	4654      	mov	r4, sl
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb8:	484e      	ldr	r0, [pc, #312]	@ (8003df4 <_svfiprintf_r+0x1e4>)
 8003cba:	f7fc fab1 	bl	8000220 <memchr>
 8003cbe:	9a04      	ldr	r2, [sp, #16]
 8003cc0:	b9d8      	cbnz	r0, 8003cfa <_svfiprintf_r+0xea>
 8003cc2:	06d0      	lsls	r0, r2, #27
 8003cc4:	bf44      	itt	mi
 8003cc6:	2320      	movmi	r3, #32
 8003cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ccc:	0711      	lsls	r1, r2, #28
 8003cce:	bf44      	itt	mi
 8003cd0:	232b      	movmi	r3, #43	@ 0x2b
 8003cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cdc:	d015      	beq.n	8003d0a <_svfiprintf_r+0xfa>
 8003cde:	9a07      	ldr	r2, [sp, #28]
 8003ce0:	4654      	mov	r4, sl
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f04f 0c0a 	mov.w	ip, #10
 8003ce8:	4621      	mov	r1, r4
 8003cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cee:	3b30      	subs	r3, #48	@ 0x30
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d94b      	bls.n	8003d8c <_svfiprintf_r+0x17c>
 8003cf4:	b1b0      	cbz	r0, 8003d24 <_svfiprintf_r+0x114>
 8003cf6:	9207      	str	r2, [sp, #28]
 8003cf8:	e014      	b.n	8003d24 <_svfiprintf_r+0x114>
 8003cfa:	eba0 0308 	sub.w	r3, r0, r8
 8003cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8003d02:	4313      	orrs	r3, r2
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	46a2      	mov	sl, r4
 8003d08:	e7d2      	b.n	8003cb0 <_svfiprintf_r+0xa0>
 8003d0a:	9b03      	ldr	r3, [sp, #12]
 8003d0c:	1d19      	adds	r1, r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfbb      	ittet	lt
 8003d16:	425b      	neglt	r3, r3
 8003d18:	f042 0202 	orrlt.w	r2, r2, #2
 8003d1c:	9307      	strge	r3, [sp, #28]
 8003d1e:	9307      	strlt	r3, [sp, #28]
 8003d20:	bfb8      	it	lt
 8003d22:	9204      	strlt	r2, [sp, #16]
 8003d24:	7823      	ldrb	r3, [r4, #0]
 8003d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d28:	d10a      	bne.n	8003d40 <_svfiprintf_r+0x130>
 8003d2a:	7863      	ldrb	r3, [r4, #1]
 8003d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d2e:	d132      	bne.n	8003d96 <_svfiprintf_r+0x186>
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	9203      	str	r2, [sp, #12]
 8003d38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d3c:	3402      	adds	r4, #2
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e04 <_svfiprintf_r+0x1f4>
 8003d44:	7821      	ldrb	r1, [r4, #0]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f7fc fa69 	bl	8000220 <memchr>
 8003d4e:	b138      	cbz	r0, 8003d60 <_svfiprintf_r+0x150>
 8003d50:	9b04      	ldr	r3, [sp, #16]
 8003d52:	eba0 000a 	sub.w	r0, r0, sl
 8003d56:	2240      	movs	r2, #64	@ 0x40
 8003d58:	4082      	lsls	r2, r0
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	3401      	adds	r4, #1
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d64:	4824      	ldr	r0, [pc, #144]	@ (8003df8 <_svfiprintf_r+0x1e8>)
 8003d66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d6a:	2206      	movs	r2, #6
 8003d6c:	f7fc fa58 	bl	8000220 <memchr>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d036      	beq.n	8003de2 <_svfiprintf_r+0x1d2>
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <_svfiprintf_r+0x1ec>)
 8003d76:	bb1b      	cbnz	r3, 8003dc0 <_svfiprintf_r+0x1b0>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	3307      	adds	r3, #7
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d86:	4433      	add	r3, r6
 8003d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d8a:	e76a      	b.n	8003c62 <_svfiprintf_r+0x52>
 8003d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d90:	460c      	mov	r4, r1
 8003d92:	2001      	movs	r0, #1
 8003d94:	e7a8      	b.n	8003ce8 <_svfiprintf_r+0xd8>
 8003d96:	2300      	movs	r3, #0
 8003d98:	3401      	adds	r4, #1
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0c0a 	mov.w	ip, #10
 8003da2:	4620      	mov	r0, r4
 8003da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da8:	3a30      	subs	r2, #48	@ 0x30
 8003daa:	2a09      	cmp	r2, #9
 8003dac:	d903      	bls.n	8003db6 <_svfiprintf_r+0x1a6>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0c6      	beq.n	8003d40 <_svfiprintf_r+0x130>
 8003db2:	9105      	str	r1, [sp, #20]
 8003db4:	e7c4      	b.n	8003d40 <_svfiprintf_r+0x130>
 8003db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dba:	4604      	mov	r4, r0
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e7f0      	b.n	8003da2 <_svfiprintf_r+0x192>
 8003dc0:	ab03      	add	r3, sp, #12
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	462a      	mov	r2, r5
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <_svfiprintf_r+0x1f0>)
 8003dc8:	a904      	add	r1, sp, #16
 8003dca:	4638      	mov	r0, r7
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	1c42      	adds	r2, r0, #1
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	d1d6      	bne.n	8003d84 <_svfiprintf_r+0x174>
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	065b      	lsls	r3, r3, #25
 8003dda:	f53f af2d 	bmi.w	8003c38 <_svfiprintf_r+0x28>
 8003dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003de0:	e72c      	b.n	8003c3c <_svfiprintf_r+0x2c>
 8003de2:	ab03      	add	r3, sp, #12
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	462a      	mov	r2, r5
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <_svfiprintf_r+0x1f0>)
 8003dea:	a904      	add	r1, sp, #16
 8003dec:	4638      	mov	r0, r7
 8003dee:	f000 f879 	bl	8003ee4 <_printf_i>
 8003df2:	e7ed      	b.n	8003dd0 <_svfiprintf_r+0x1c0>
 8003df4:	0800432c 	.word	0x0800432c
 8003df8:	08004336 	.word	0x08004336
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003b59 	.word	0x08003b59
 8003e04:	08004332 	.word	0x08004332

08003e08 <_printf_common>:
 8003e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	4698      	mov	r8, r3
 8003e10:	688a      	ldr	r2, [r1, #8]
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfb8      	it	lt
 8003e1c:	4613      	movlt	r3, r2
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e24:	4607      	mov	r7, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	b10a      	cbz	r2, 8003e2e <_printf_common+0x26>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0699      	lsls	r1, r3, #26
 8003e32:	bf42      	ittt	mi
 8003e34:	6833      	ldrmi	r3, [r6, #0]
 8003e36:	3302      	addmi	r3, #2
 8003e38:	6033      	strmi	r3, [r6, #0]
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	f015 0506 	ands.w	r5, r5, #6
 8003e40:	d106      	bne.n	8003e50 <_printf_common+0x48>
 8003e42:	f104 0a19 	add.w	sl, r4, #25
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	6832      	ldr	r2, [r6, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dc26      	bgt.n	8003e9e <_printf_common+0x96>
 8003e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	3b00      	subs	r3, #0
 8003e58:	bf18      	it	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	0692      	lsls	r2, r2, #26
 8003e5e:	d42b      	bmi.n	8003eb8 <_printf_common+0xb0>
 8003e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e64:	4641      	mov	r1, r8
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c8      	blx	r9
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d01e      	beq.n	8003eac <_printf_common+0xa4>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf02      	ittt	eq
 8003e7a:	68e5      	ldreq	r5, [r4, #12]
 8003e7c:	6833      	ldreq	r3, [r6, #0]
 8003e7e:	1aed      	subeq	r5, r5, r3
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	bf0c      	ite	eq
 8003e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e88:	2500      	movne	r5, #0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bfc4      	itt	gt
 8003e8e:	1a9b      	subgt	r3, r3, r2
 8003e90:	18ed      	addgt	r5, r5, r3
 8003e92:	2600      	movs	r6, #0
 8003e94:	341a      	adds	r4, #26
 8003e96:	42b5      	cmp	r5, r6
 8003e98:	d11a      	bne.n	8003ed0 <_printf_common+0xc8>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e008      	b.n	8003eb0 <_printf_common+0xa8>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4652      	mov	r2, sl
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	47c8      	blx	r9
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_printf_common+0xac>
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	e7c6      	b.n	8003e46 <_printf_common+0x3e>
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	2030      	movs	r0, #48	@ 0x30
 8003ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ec2:	4422      	add	r2, r4
 8003ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ecc:	3302      	adds	r3, #2
 8003ece:	e7c7      	b.n	8003e60 <_printf_common+0x58>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	47c8      	blx	r9
 8003eda:	3001      	adds	r0, #1
 8003edc:	d0e6      	beq.n	8003eac <_printf_common+0xa4>
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7d9      	b.n	8003e96 <_printf_common+0x8e>
	...

08003ee4 <_printf_i>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	7e0f      	ldrb	r7, [r1, #24]
 8003eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eec:	2f78      	cmp	r7, #120	@ 0x78
 8003eee:	4691      	mov	r9, r2
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003efa:	d807      	bhi.n	8003f0c <_printf_i+0x28>
 8003efc:	2f62      	cmp	r7, #98	@ 0x62
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x32>
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	f000 80d2 	beq.w	80040aa <_printf_i+0x1c6>
 8003f06:	2f58      	cmp	r7, #88	@ 0x58
 8003f08:	f000 80b9 	beq.w	800407e <_printf_i+0x19a>
 8003f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f14:	e03a      	b.n	8003f8c <_printf_i+0xa8>
 8003f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f1a:	2b15      	cmp	r3, #21
 8003f1c:	d8f6      	bhi.n	8003f0c <_printf_i+0x28>
 8003f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f24 <_printf_i+0x40>)
 8003f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f0d 	.word	0x08003f0d
 8003f30:	08003f0d 	.word	0x08003f0d
 8003f34:	08003f0d 	.word	0x08003f0d
 8003f38:	08003f0d 	.word	0x08003f0d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f0d 	.word	0x08003f0d
 8003f44:	08003f0d 	.word	0x08003f0d
 8003f48:	08003f0d 	.word	0x08003f0d
 8003f4c:	08003f0d 	.word	0x08003f0d
 8003f50:	08004091 	.word	0x08004091
 8003f54:	08003fbb 	.word	0x08003fbb
 8003f58:	0800404b 	.word	0x0800404b
 8003f5c:	08003f0d 	.word	0x08003f0d
 8003f60:	08003f0d 	.word	0x08003f0d
 8003f64:	080040b3 	.word	0x080040b3
 8003f68:	08003f0d 	.word	0x08003f0d
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003f0d 	.word	0x08003f0d
 8003f74:	08003f0d 	.word	0x08003f0d
 8003f78:	08004053 	.word	0x08004053
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6032      	str	r2, [r6, #0]
 8003f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e09d      	b.n	80040cc <_printf_i+0x1e8>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	0606      	lsls	r6, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xbc>
 8003f9c:	681d      	ldr	r5, [r3, #0]
 8003f9e:	e003      	b.n	8003fa8 <_printf_i+0xc4>
 8003fa0:	0645      	lsls	r5, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xb8>
 8003fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	da03      	bge.n	8003fb4 <_printf_i+0xd0>
 8003fac:	232d      	movs	r3, #45	@ 0x2d
 8003fae:	426d      	negs	r5, r5
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb4:	4859      	ldr	r0, [pc, #356]	@ (800411c <_printf_i+0x238>)
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e011      	b.n	8003fde <_printf_i+0xfa>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	0608      	lsls	r0, r1, #24
 8003fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc4:	d402      	bmi.n	8003fcc <_printf_i+0xe8>
 8003fc6:	0649      	lsls	r1, r1, #25
 8003fc8:	bf48      	it	mi
 8003fca:	b2ad      	uxthmi	r5, r5
 8003fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fce:	4853      	ldr	r0, [pc, #332]	@ (800411c <_printf_i+0x238>)
 8003fd0:	6033      	str	r3, [r6, #0]
 8003fd2:	bf14      	ite	ne
 8003fd4:	230a      	movne	r3, #10
 8003fd6:	2308      	moveq	r3, #8
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fde:	6866      	ldr	r6, [r4, #4]
 8003fe0:	60a6      	str	r6, [r4, #8]
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	bfa2      	ittt	ge
 8003fe6:	6821      	ldrge	r1, [r4, #0]
 8003fe8:	f021 0104 	bicge.w	r1, r1, #4
 8003fec:	6021      	strge	r1, [r4, #0]
 8003fee:	b90d      	cbnz	r5, 8003ff4 <_printf_i+0x110>
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	d04b      	beq.n	800408c <_printf_i+0x1a8>
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffe:	5dc7      	ldrb	r7, [r0, r7]
 8004000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004004:	462f      	mov	r7, r5
 8004006:	42bb      	cmp	r3, r7
 8004008:	460d      	mov	r5, r1
 800400a:	d9f4      	bls.n	8003ff6 <_printf_i+0x112>
 800400c:	2b08      	cmp	r3, #8
 800400e:	d10b      	bne.n	8004028 <_printf_i+0x144>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	07df      	lsls	r7, r3, #31
 8004014:	d508      	bpl.n	8004028 <_printf_i+0x144>
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	6861      	ldr	r1, [r4, #4]
 800401a:	4299      	cmp	r1, r3
 800401c:	bfde      	ittt	le
 800401e:	2330      	movle	r3, #48	@ 0x30
 8004020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004024:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004028:	1b92      	subs	r2, r2, r6
 800402a:	6122      	str	r2, [r4, #16]
 800402c:	f8cd a000 	str.w	sl, [sp]
 8004030:	464b      	mov	r3, r9
 8004032:	aa03      	add	r2, sp, #12
 8004034:	4621      	mov	r1, r4
 8004036:	4640      	mov	r0, r8
 8004038:	f7ff fee6 	bl	8003e08 <_printf_common>
 800403c:	3001      	adds	r0, #1
 800403e:	d14a      	bne.n	80040d6 <_printf_i+0x1f2>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b004      	add	sp, #16
 8004046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	f043 0320 	orr.w	r3, r3, #32
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	4833      	ldr	r0, [pc, #204]	@ (8004120 <_printf_i+0x23c>)
 8004054:	2778      	movs	r7, #120	@ 0x78
 8004056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6831      	ldr	r1, [r6, #0]
 800405e:	061f      	lsls	r7, r3, #24
 8004060:	f851 5b04 	ldr.w	r5, [r1], #4
 8004064:	d402      	bmi.n	800406c <_printf_i+0x188>
 8004066:	065f      	lsls	r7, r3, #25
 8004068:	bf48      	it	mi
 800406a:	b2ad      	uxthmi	r5, r5
 800406c:	6031      	str	r1, [r6, #0]
 800406e:	07d9      	lsls	r1, r3, #31
 8004070:	bf44      	itt	mi
 8004072:	f043 0320 	orrmi.w	r3, r3, #32
 8004076:	6023      	strmi	r3, [r4, #0]
 8004078:	b11d      	cbz	r5, 8004082 <_printf_i+0x19e>
 800407a:	2310      	movs	r3, #16
 800407c:	e7ac      	b.n	8003fd8 <_printf_i+0xf4>
 800407e:	4827      	ldr	r0, [pc, #156]	@ (800411c <_printf_i+0x238>)
 8004080:	e7e9      	b.n	8004056 <_printf_i+0x172>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	f023 0320 	bic.w	r3, r3, #32
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	e7f6      	b.n	800407a <_printf_i+0x196>
 800408c:	4616      	mov	r6, r2
 800408e:	e7bd      	b.n	800400c <_printf_i+0x128>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	1d18      	adds	r0, r3, #4
 8004098:	6030      	str	r0, [r6, #0]
 800409a:	062e      	lsls	r6, r5, #24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	d501      	bpl.n	80040a4 <_printf_i+0x1c0>
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	e002      	b.n	80040aa <_printf_i+0x1c6>
 80040a4:	0668      	lsls	r0, r5, #25
 80040a6:	d5fb      	bpl.n	80040a0 <_printf_i+0x1bc>
 80040a8:	8019      	strh	r1, [r3, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	4616      	mov	r6, r2
 80040b0:	e7bc      	b.n	800402c <_printf_i+0x148>
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	681e      	ldr	r6, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	2100      	movs	r1, #0
 80040be:	4630      	mov	r0, r6
 80040c0:	f7fc f8ae 	bl	8000220 <memchr>
 80040c4:	b108      	cbz	r0, 80040ca <_printf_i+0x1e6>
 80040c6:	1b80      	subs	r0, r0, r6
 80040c8:	6060      	str	r0, [r4, #4]
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	6123      	str	r3, [r4, #16]
 80040ce:	2300      	movs	r3, #0
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d4:	e7aa      	b.n	800402c <_printf_i+0x148>
 80040d6:	6923      	ldr	r3, [r4, #16]
 80040d8:	4632      	mov	r2, r6
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	47d0      	blx	sl
 80040e0:	3001      	adds	r0, #1
 80040e2:	d0ad      	beq.n	8004040 <_printf_i+0x15c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	079b      	lsls	r3, r3, #30
 80040e8:	d413      	bmi.n	8004112 <_printf_i+0x22e>
 80040ea:	68e0      	ldr	r0, [r4, #12]
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	4298      	cmp	r0, r3
 80040f0:	bfb8      	it	lt
 80040f2:	4618      	movlt	r0, r3
 80040f4:	e7a6      	b.n	8004044 <_printf_i+0x160>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4632      	mov	r2, r6
 80040fa:	4649      	mov	r1, r9
 80040fc:	4640      	mov	r0, r8
 80040fe:	47d0      	blx	sl
 8004100:	3001      	adds	r0, #1
 8004102:	d09d      	beq.n	8004040 <_printf_i+0x15c>
 8004104:	3501      	adds	r5, #1
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	9903      	ldr	r1, [sp, #12]
 800410a:	1a5b      	subs	r3, r3, r1
 800410c:	42ab      	cmp	r3, r5
 800410e:	dcf2      	bgt.n	80040f6 <_printf_i+0x212>
 8004110:	e7eb      	b.n	80040ea <_printf_i+0x206>
 8004112:	2500      	movs	r5, #0
 8004114:	f104 0619 	add.w	r6, r4, #25
 8004118:	e7f5      	b.n	8004106 <_printf_i+0x222>
 800411a:	bf00      	nop
 800411c:	0800433d 	.word	0x0800433d
 8004120:	0800434e 	.word	0x0800434e

08004124 <memmove>:
 8004124:	4288      	cmp	r0, r1
 8004126:	b510      	push	{r4, lr}
 8004128:	eb01 0402 	add.w	r4, r1, r2
 800412c:	d902      	bls.n	8004134 <memmove+0x10>
 800412e:	4284      	cmp	r4, r0
 8004130:	4623      	mov	r3, r4
 8004132:	d807      	bhi.n	8004144 <memmove+0x20>
 8004134:	1e43      	subs	r3, r0, #1
 8004136:	42a1      	cmp	r1, r4
 8004138:	d008      	beq.n	800414c <memmove+0x28>
 800413a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004142:	e7f8      	b.n	8004136 <memmove+0x12>
 8004144:	4402      	add	r2, r0
 8004146:	4601      	mov	r1, r0
 8004148:	428a      	cmp	r2, r1
 800414a:	d100      	bne.n	800414e <memmove+0x2a>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004156:	e7f7      	b.n	8004148 <memmove+0x24>

08004158 <_sbrk_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4d06      	ldr	r5, [pc, #24]	@ (8004174 <_sbrk_r+0x1c>)
 800415c:	2300      	movs	r3, #0
 800415e:	4604      	mov	r4, r0
 8004160:	4608      	mov	r0, r1
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	f7fc fd56 	bl	8000c14 <_sbrk>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d102      	bne.n	8004172 <_sbrk_r+0x1a>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	b103      	cbz	r3, 8004172 <_sbrk_r+0x1a>
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	20000220 	.word	0x20000220

08004178 <memcpy>:
 8004178:	440a      	add	r2, r1
 800417a:	4291      	cmp	r1, r2
 800417c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004180:	d100      	bne.n	8004184 <memcpy+0xc>
 8004182:	4770      	bx	lr
 8004184:	b510      	push	{r4, lr}
 8004186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800418a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418e:	4291      	cmp	r1, r2
 8004190:	d1f9      	bne.n	8004186 <memcpy+0xe>
 8004192:	bd10      	pop	{r4, pc}

08004194 <_realloc_r>:
 8004194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004198:	4680      	mov	r8, r0
 800419a:	4615      	mov	r5, r2
 800419c:	460c      	mov	r4, r1
 800419e:	b921      	cbnz	r1, 80041aa <_realloc_r+0x16>
 80041a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	4611      	mov	r1, r2
 80041a6:	f7ff bc4b 	b.w	8003a40 <_malloc_r>
 80041aa:	b92a      	cbnz	r2, 80041b8 <_realloc_r+0x24>
 80041ac:	f7ff fbdc 	bl	8003968 <_free_r>
 80041b0:	2400      	movs	r4, #0
 80041b2:	4620      	mov	r0, r4
 80041b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b8:	f000 f81a 	bl	80041f0 <_malloc_usable_size_r>
 80041bc:	4285      	cmp	r5, r0
 80041be:	4606      	mov	r6, r0
 80041c0:	d802      	bhi.n	80041c8 <_realloc_r+0x34>
 80041c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041c6:	d8f4      	bhi.n	80041b2 <_realloc_r+0x1e>
 80041c8:	4629      	mov	r1, r5
 80041ca:	4640      	mov	r0, r8
 80041cc:	f7ff fc38 	bl	8003a40 <_malloc_r>
 80041d0:	4607      	mov	r7, r0
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d0ec      	beq.n	80041b0 <_realloc_r+0x1c>
 80041d6:	42b5      	cmp	r5, r6
 80041d8:	462a      	mov	r2, r5
 80041da:	4621      	mov	r1, r4
 80041dc:	bf28      	it	cs
 80041de:	4632      	movcs	r2, r6
 80041e0:	f7ff ffca 	bl	8004178 <memcpy>
 80041e4:	4621      	mov	r1, r4
 80041e6:	4640      	mov	r0, r8
 80041e8:	f7ff fbbe 	bl	8003968 <_free_r>
 80041ec:	463c      	mov	r4, r7
 80041ee:	e7e0      	b.n	80041b2 <_realloc_r+0x1e>

080041f0 <_malloc_usable_size_r>:
 80041f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f4:	1f18      	subs	r0, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bfbc      	itt	lt
 80041fa:	580b      	ldrlt	r3, [r1, r0]
 80041fc:	18c0      	addlt	r0, r0, r3
 80041fe:	4770      	bx	lr

08004200 <_init>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr

0800420c <_fini>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr
