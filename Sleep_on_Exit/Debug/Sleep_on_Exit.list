
Sleep_on_Exit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002100  08002100  00003100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002108  08002108  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002108  08002108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002110  08002110  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00003110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002114  08002114  00003114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002118  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002124  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002124  000040bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be8e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acc  00000000  00000000  0000feca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00011998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000898  00000000  00000000  000124a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000208a  00000000  00000000  00012d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9c1  00000000  00000000  00014dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9a5  00000000  00000000  00021783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  000ae16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  000b0f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080020e8 	.word	0x080020e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080020e8 	.word	0x080020e8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <SysTick_Handler>:

extern TIM_HandleTypeDef htimer5;
extern UART_HandleTypeDef huart2;

void SysTick_Handler (void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004c8:	f000 f9e6 	bl	8000898 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004cc:	f000 fb15 	bl	8000afa <HAL_SYSTICK_IRQHandler>

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <USART2_IRQHandler>:
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
}


void USART2_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80004d8:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <USART2_IRQHandler+0x10>)
 80004da:	f000 ff1d 	bl	8001318 <HAL_UART_IRQHandler>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000070 	.word	0x20000070

080004e8 <main>:

extern uint8_t some_data[];


int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_Init();
 80004ec:	f000 f982 	bl	80007f4 <HAL_Init>

	GPIO_Init();
 80004f0:	f000 f82a 	bl	8000548 <GPIO_Init>

	UART2_Init();
 80004f4:	f000 f858 	bl	80005a8 <UART2_Init>

	TIMER5_Init();
 80004f8:	f000 f87c 	bl	80005f4 <TIMER5_Init>

	GPIO_AnalogConfig();
 80004fc:	f000 f80e 	bl	800051c <GPIO_AnalogConfig>

	HAL_PWR_EnableSleepOnExit(); //SCB->SCR |= ( 1 << 1);
 8000500:	f000 fd38 	bl	8000f74 <HAL_PWR_EnableSleepOnExit>

    /* lets start with fresh Status register of Timer to avoid any spurious interrupts */
    TIM5->SR = 0;
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <main+0x2c>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]

	//Lets start the timer in interrupt mode
	HAL_TIM_Base_Start_IT(&htimer5);
 800050a:	4803      	ldr	r0, [pc, #12]	@ (8000518 <main+0x30>)
 800050c:	f000 fdc6 	bl	800109c <HAL_TIM_Base_Start_IT>

	while(1);
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <main+0x28>
 8000514:	40000c00 	.word	0x40000c00
 8000518:	20000028 	.word	0x20000028

0800051c <GPIO_AnalogConfig>:
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 }


void GPIO_AnalogConfig(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioA;

	uint32_t gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_4 | \
 8000522:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8000526:	617b      	str	r3, [r7, #20]
						 GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7 |\
						 GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |\
						 GPIO_PIN_11 | GPIO_PIN_12 |GPIO_PIN_13 | \
						 GPIO_PIN_14 | GPIO_PIN_15;

	GpioA.Pin = gpio_pins;
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	603b      	str	r3, [r7, #0]
	GpioA.Mode = GPIO_MODE_ANALOG;
 800052c:	2303      	movs	r3, #3
 800052e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA,&GpioA);
 8000530:	463b      	mov	r3, r7
 8000532:	4619      	mov	r1, r3
 8000534:	4803      	ldr	r0, [pc, #12]	@ (8000544 <GPIO_AnalogConfig+0x28>)
 8000536:	f000 fb7f 	bl	8000c38 <HAL_GPIO_Init>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020000 	.word	0x40020000

08000548 <GPIO_Init>:


void GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <GPIO_Init+0x58>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <GPIO_Init+0x58>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <GPIO_Init+0x58>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio ;
	ledgpio.Pin = GPIO_PIN_5;
 800056a:	2320      	movs	r3, #32
 800056c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA,&ledgpio);
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4619      	mov	r1, r3
 800057a:	480a      	ldr	r0, [pc, #40]	@ (80005a4 <GPIO_Init+0x5c>)
 800057c:	f000 fb5c 	bl	8000c38 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_12;
 8000580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000584:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <GPIO_Init+0x5c>)
 8000594:	f000 fb50 	bl	8000c38 <HAL_GPIO_Init>
}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000

080005a8 <UART2_Init>:



void UART2_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <UART2_Init+0x44>)
 80005ae:	4a10      	ldr	r2, [pc, #64]	@ (80005f0 <UART2_Init+0x48>)
 80005b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <UART2_Init+0x44>)
 80005b4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80005b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <UART2_Init+0x44>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <UART2_Init+0x44>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <UART2_Init+0x44>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <UART2_Init+0x44>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <UART2_Init+0x44>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	615a      	str	r2, [r3, #20]

	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80005d8:	4804      	ldr	r0, [pc, #16]	@ (80005ec <UART2_Init+0x44>)
 80005da:	f000 fe4d 	bl	8001278 <HAL_UART_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80005e4:	f000 f836 	bl	8000654 <Error_handler>
	}
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000070 	.word	0x20000070
 80005f0:	40004400 	.word	0x40004400

080005f4 <TIMER5_Init>:


void TIMER5_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	htimer5.Instance = TIM5;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <TIMER5_Init+0x2c>)
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <TIMER5_Init+0x30>)
 80005fc:	601a      	str	r2, [r3, #0]
	htimer5.Init.Prescaler = 4999;
 80005fe:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <TIMER5_Init+0x2c>)
 8000600:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000604:	605a      	str	r2, [r3, #4]
	htimer5.Init.Period = 100-1;
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <TIMER5_Init+0x2c>)
 8000608:	2263      	movs	r2, #99	@ 0x63
 800060a:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer5) != HAL_OK )
 800060c:	4804      	ldr	r0, [pc, #16]	@ (8000620 <TIMER5_Init+0x2c>)
 800060e:	f000 fcf5 	bl	8000ffc <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <TIMER5_Init+0x28>
	{
		Error_handler();
 8000618:	f000 f81c 	bl	8000654 <Error_handler>
	}
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000028 	.word	0x20000028
 8000624:	40000c00 	.word	0x40000c00

08000628 <HAL_UART_TxCpltCallback>:
	 }
}


 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <HAL_UART_TxCpltCallback+0x28>)
 8000638:	f000 fc82 	bl	8000f40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000642:	4803      	ldr	r0, [pc, #12]	@ (8000650 <HAL_UART_TxCpltCallback+0x28>)
 8000644:	f000 fc7c 	bl	8000f40 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020000 	.word	0x40020000

08000654 <Error_handler>:


void Error_handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	while(1);
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <Error_handler+0x4>

0800065c <HAL_MspInit>:
 */

#include "main_app.h"

void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 fa09 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <HAL_MspInit+0x40>)
 8000668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800066a:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <HAL_MspInit+0x40>)
 800066c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000670:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	f06f 000b 	mvn.w	r0, #11
 800067a:	f000 fa08 	bl	8000a8e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f06f 000a 	mvn.w	r0, #10
 8000686:	f000 fa02 	bl	8000a8e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	f06f 0009 	mvn.w	r0, #9
 8000692:	f000 f9fc 	bl	8000a8e <HAL_NVIC_SetPriority>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM5_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <HAL_TIM_Base_MspInit+0x3c>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <HAL_TIM_Base_MspInit+0x3c>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <HAL_TIM_Base_MspInit+0x3c>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80006c4:	2032      	movs	r0, #50	@ 0x32
 80006c6:	f000 f9fe 	bl	8000ac6 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM5_IRQn,0,0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2032      	movs	r0, #50	@ 0x32
 80006d0:	f000 f9dd 	bl	8000a8e <HAL_NVIC_SetPriority>

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800

080006e0 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral

	 __HAL_RCC_USART2_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <HAL_UART_MspInit+0x94>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a20      	ldr	r2, [pc, #128]	@ (8000774 <HAL_UART_MspInit+0x94>)
 80006f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <HAL_UART_MspInit+0x94>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <HAL_UART_MspInit+0x94>)
 8000706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000708:	4a1a      	ldr	r2, [pc, #104]	@ (8000774 <HAL_UART_MspInit+0x94>)
 800070a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800070e:	6613      	str	r3, [r2, #96]	@ 0x60

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <HAL_UART_MspInit+0x94>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000718:	4a16      	ldr	r2, [pc, #88]	@ (8000774 <HAL_UART_MspInit+0x94>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_UART_MspInit+0x94>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 800072c:	2304      	movs	r3, #4
 800072e:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000734:	2301      	movs	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]

	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 800073c:	2307      	movs	r3, #7
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	@ (8000778 <HAL_UART_MspInit+0x98>)
 8000748:	f000 fa76 	bl	8000c38 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 800074c:	2308      	movs	r3, #8
 800074e:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4808      	ldr	r0, [pc, #32]	@ (8000778 <HAL_UART_MspInit+0x98>)
 8000758:	f000 fa6e 	bl	8000c38 <HAL_GPIO_Init>

	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 800075c:	2026      	movs	r0, #38	@ 0x26
 800075e:	f000 f9b2 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	2026      	movs	r0, #38	@ 0x26
 8000768:	f000 f991 	bl	8000a8e <HAL_NVIC_SetPriority>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000

0800077c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007a4:	f7ff ffea 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80007ce:	f001 fc67 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d2:	f7ff fe89 	bl	80004e8 <main>
  bx  lr    
 80007d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	08002118 	.word	0x08002118
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	200000bc 	.word	0x200000bc

080007f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <HAL_Init+0x40>)
 80007fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <HAL_Init+0x40>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_Init+0x40>)
 800080a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800080e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_Init+0x40>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <HAL_Init+0x40>)
 8000816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800081a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f92b 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff ff18 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023c00 	.word	0x40023c00

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f943 	bl	8000ae2 <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f90b 	bl	8000a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	200000b8 	.word	0x200000b8

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	200000b8 	.word	0x200000b8

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4907      	ldr	r1, [pc, #28]	@ (8000974 <__NVIC_EnableIRQ+0x38>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	@ (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	@ (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	@ 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a44:	d301      	bcc.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00f      	b.n	8000a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <SysTick_Config+0x40>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	210f      	movs	r1, #15
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f7ff ff8e 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <SysTick_Config+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <SysTick_Config+0x40>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff29 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff3e 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff8e 	bl	80009cc <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff31 	bl	800093c <__NVIC_EnableIRQ>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffa2 	bl	8000a34 <SysTick_Config>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000afe:	f000 f802 	bl	8000b06 <HAL_SYSTICK_Callback>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b22:	f7ff fecd 	bl	80008c0 <HAL_GetTick>
 8000b26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d008      	beq.n	8000b46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e052      	b.n	8000bec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0216 	bic.w	r2, r2, #22
 8000b54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <HAL_DMA_Abort+0x62>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0208 	bic.w	r2, r2, #8
 8000b84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0201 	bic.w	r2, r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b96:	e013      	b.n	8000bc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b98:	f7ff fe92 	bl	80008c0 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d90c      	bls.n	8000bc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2220      	movs	r2, #32
 8000baa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e015      	b.n	8000bec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1e4      	bne.n	8000b98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bd2:	223f      	movs	r2, #63	@ 0x3f
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d004      	beq.n	8000c12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2280      	movs	r2, #128	@ 0x80
 8000c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00c      	b.n	8000c2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2205      	movs	r2, #5
 8000c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0201 	bic.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	@ 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	e159      	b.n	8000f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8148 	bne.w	8000f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d005      	beq.n	8000c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d130      	bne.n	8000cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	f003 0201 	and.w	r2, r3, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d017      	beq.n	8000d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d123      	bne.n	8000d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	69b9      	ldr	r1, [r7, #24]
 8000d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0203 	and.w	r2, r3, #3
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a2 	beq.w	8000f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b57      	ldr	r3, [pc, #348]	@ (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a56      	ldr	r2, [pc, #344]	@ (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b54      	ldr	r3, [pc, #336]	@ (8000f20 <HAL_GPIO_Init+0x2e8>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dda:	4a52      	ldr	r2, [pc, #328]	@ (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a49      	ldr	r2, [pc, #292]	@ (8000f28 <HAL_GPIO_Init+0x2f0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d019      	beq.n	8000e3a <HAL_GPIO_Init+0x202>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a48      	ldr	r2, [pc, #288]	@ (8000f2c <HAL_GPIO_Init+0x2f4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0x1fe>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a47      	ldr	r2, [pc, #284]	@ (8000f30 <HAL_GPIO_Init+0x2f8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d00d      	beq.n	8000e32 <HAL_GPIO_Init+0x1fa>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a46      	ldr	r2, [pc, #280]	@ (8000f34 <HAL_GPIO_Init+0x2fc>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x1f6>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a45      	ldr	r2, [pc, #276]	@ (8000f38 <HAL_GPIO_Init+0x300>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x1f2>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x204>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	@ (8000f24 <HAL_GPIO_Init+0x2ec>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a24      	ldr	r2, [pc, #144]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eae:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efc:	4a0f      	ldr	r2, [pc, #60]	@ (8000f3c <HAL_GPIO_Init+0x304>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f aea2 	bls.w	8000c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6113      	str	r3, [r2, #16]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_RCC_GetHCLKFreq>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	0a9b      	lsrs	r3, r3, #10
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	4903      	ldr	r1, [pc, #12]	@ (8000fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fc2:	5ccb      	ldrb	r3, [r1, r3]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	08002100 	.word	0x08002100

08000fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fd8:	f7ff ffdc 	bl	8000f94 <HAL_RCC_GetHCLKFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	0b5b      	lsrs	r3, r3, #13
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	4903      	ldr	r1, [pc, #12]	@ (8000ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	08002100 	.word	0x08002100

08000ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e041      	b.n	8001092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fb3c 	bl	80006a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3304      	adds	r3, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f000 f890 	bl	8001160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d001      	beq.n	80010b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e044      	b.n	800113e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2202      	movs	r2, #2
 80010b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <HAL_TIM_Base_Start_IT+0xb0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d018      	beq.n	8001108 <HAL_TIM_Base_Start_IT+0x6c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010de:	d013      	beq.n	8001108 <HAL_TIM_Base_Start_IT+0x6c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001150 <HAL_TIM_Base_Start_IT+0xb4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00e      	beq.n	8001108 <HAL_TIM_Base_Start_IT+0x6c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <HAL_TIM_Base_Start_IT+0xb8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d009      	beq.n	8001108 <HAL_TIM_Base_Start_IT+0x6c>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <HAL_TIM_Base_Start_IT+0xbc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d004      	beq.n	8001108 <HAL_TIM_Base_Start_IT+0x6c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a16      	ldr	r2, [pc, #88]	@ (800115c <HAL_TIM_Base_Start_IT+0xc0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d111      	bne.n	800112c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d010      	beq.n	800113c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0201 	orr.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800112a:	e007      	b.n	800113c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	40000400 	.word	0x40000400
 8001154:	40000800 	.word	0x40000800
 8001158:	40000c00 	.word	0x40000c00
 800115c:	40014000 	.word	0x40014000

08001160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a3a      	ldr	r2, [pc, #232]	@ (800125c <TIM_Base_SetConfig+0xfc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d00f      	beq.n	8001198 <TIM_Base_SetConfig+0x38>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800117e:	d00b      	beq.n	8001198 <TIM_Base_SetConfig+0x38>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <TIM_Base_SetConfig+0x100>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d007      	beq.n	8001198 <TIM_Base_SetConfig+0x38>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a36      	ldr	r2, [pc, #216]	@ (8001264 <TIM_Base_SetConfig+0x104>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d003      	beq.n	8001198 <TIM_Base_SetConfig+0x38>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a35      	ldr	r2, [pc, #212]	@ (8001268 <TIM_Base_SetConfig+0x108>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d108      	bne.n	80011aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800119e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a2b      	ldr	r2, [pc, #172]	@ (800125c <TIM_Base_SetConfig+0xfc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01b      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b8:	d017      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <TIM_Base_SetConfig+0x100>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <TIM_Base_SetConfig+0x104>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00f      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a26      	ldr	r2, [pc, #152]	@ (8001268 <TIM_Base_SetConfig+0x108>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00b      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a25      	ldr	r2, [pc, #148]	@ (800126c <TIM_Base_SetConfig+0x10c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a24      	ldr	r2, [pc, #144]	@ (8001270 <TIM_Base_SetConfig+0x110>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d003      	beq.n	80011ea <TIM_Base_SetConfig+0x8a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a23      	ldr	r2, [pc, #140]	@ (8001274 <TIM_Base_SetConfig+0x114>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d108      	bne.n	80011fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80011f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <TIM_Base_SetConfig+0xfc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d103      	bne.n	8001230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	f023 0201 	bic.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
  }
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000
 8001260:	40000400 	.word	0x40000400
 8001264:	40000800 	.word	0x40000800
 8001268:	40000c00 	.word	0x40000c00
 800126c:	40014000 	.word	0x40014000
 8001270:	40014400 	.word	0x40014400
 8001274:	40014800 	.word	0x40014800

08001278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e042      	b.n	8001310 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fa1e 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2224      	movs	r2, #36	@ 0x24
 80012a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80012ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fc7b 	bl	8001bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80012d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80012e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2220      	movs	r2, #32
 80012fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ba      	sub	sp, #232	@ 0xe8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800134a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800135e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_UART_IRQHandler+0x66>
 800136a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fb5f 	bl	8001a3a <UART_Receive_IT>
      return;
 800137c:	e25b      	b.n	8001836 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800137e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80de 	beq.w	8001544 <HAL_UART_IRQHandler+0x22c>
 8001388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d106      	bne.n	80013a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001398:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80d1 	beq.w	8001544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80013a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_UART_IRQHandler+0xae>
 80013ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <HAL_UART_IRQHandler+0xd2>
 80013d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_UART_IRQHandler+0xf6>
 80013f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f043 0204 	orr.w	r2, r3, #4
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800140e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d011      	beq.n	800143e <HAL_UART_IRQHandler+0x126>
 800141a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f043 0208 	orr.w	r2, r3, #8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 81f2 	beq.w	800182c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_UART_IRQHandler+0x14e>
 8001454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 faea 	bl	8001a3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001470:	2b40      	cmp	r3, #64	@ 0x40
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <HAL_UART_IRQHandler+0x17a>
 800148a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800148e:	2b00      	cmp	r3, #0
 8001490:	d04f      	beq.n	8001532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f9f2 	bl	800187c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a2:	2b40      	cmp	r3, #64	@ 0x40
 80014a4:	d141      	bne.n	800152a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3314      	adds	r3, #20
 80014ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014b4:	e853 3f00 	ldrex	r3, [r3]
 80014b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80014bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3314      	adds	r3, #20
 80014ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80014d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80014d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80014de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80014e2:	e841 2300 	strex	r3, r2, [r1]
 80014e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80014ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1d9      	bne.n	80014a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d013      	beq.n	8001522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014fe:	4a7e      	ldr	r2, [pc, #504]	@ (80016f8 <HAL_UART_IRQHandler+0x3e0>)
 8001500:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb74 	bl	8000bf4 <HAL_DMA_Abort_IT>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d016      	beq.n	8001540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800151c:	4610      	mov	r0, r2
 800151e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001520:	e00e      	b.n	8001540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f994 	bl	8001850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001528:	e00a      	b.n	8001540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f990 	bl	8001850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001530:	e006      	b.n	8001540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f98c 	bl	8001850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800153e:	e175      	b.n	800182c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001540:	bf00      	nop
    return;
 8001542:	e173      	b.n	800182c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	2b01      	cmp	r3, #1
 800154a:	f040 814f 	bne.w	80017ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800154e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8148 	beq.w	80017ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800155c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8141 	beq.w	80017ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158a:	2b40      	cmp	r3, #64	@ 0x40
 800158c:	f040 80b6 	bne.w	80016fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800159c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8145 	beq.w	8001830 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80015ae:	429a      	cmp	r2, r3
 80015b0:	f080 813e 	bcs.w	8001830 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80015ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015c6:	f000 8088 	beq.w	80016da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	330c      	adds	r3, #12
 80015d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015d8:	e853 3f00 	ldrex	r3, [r3]
 80015dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80015e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	330c      	adds	r3, #12
 80015f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80015f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80015fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001606:	e841 2300 	strex	r3, r2, [r1]
 800160a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800160e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1d9      	bne.n	80015ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3314      	adds	r3, #20
 800161c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800161e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001620:	e853 3f00 	ldrex	r3, [r3]
 8001624:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3314      	adds	r3, #20
 8001636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800163a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800163e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001640:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001642:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001646:	e841 2300 	strex	r3, r2, [r1]
 800164a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800164c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e1      	bne.n	8001616 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3314      	adds	r3, #20
 8001658:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800165a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800165c:	e853 3f00 	ldrex	r3, [r3]
 8001660:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3314      	adds	r3, #20
 8001672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001676:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001678:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800167a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800167c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800167e:	e841 2300 	strex	r3, r2, [r1]
 8001682:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e3      	bne.n	8001652 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	330c      	adds	r3, #12
 800169e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016a2:	e853 3f00 	ldrex	r3, [r3]
 80016a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80016a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016aa:	f023 0310 	bic.w	r3, r3, #16
 80016ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	330c      	adds	r3, #12
 80016b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80016bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80016be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016c4:	e841 2300 	strex	r3, r2, [r1]
 80016c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80016ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1e3      	bne.n	8001698 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fa1d 	bl	8000b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2202      	movs	r2, #2
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8b7 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80016f6:	e09b      	b.n	8001830 <HAL_UART_IRQHandler+0x518>
 80016f8:	08001943 	.word	0x08001943
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001704:	b29b      	uxth	r3, r3
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 808e 	beq.w	8001834 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8089 	beq.w	8001834 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	330c      	adds	r3, #12
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172c:	e853 3f00 	ldrex	r3, [r3]
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	330c      	adds	r3, #12
 8001742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001746:	647a      	str	r2, [r7, #68]	@ 0x44
 8001748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800174a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800174c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800174e:	e841 2300 	strex	r3, r2, [r1]
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e3      	bne.n	8001722 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3314      	adds	r3, #20
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	e853 3f00 	ldrex	r3, [r3]
 8001768:	623b      	str	r3, [r7, #32]
   return(result);
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3314      	adds	r3, #20
 800177a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800177e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001786:	e841 2300 	strex	r3, r2, [r1]
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1e3      	bne.n	800175a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	330c      	adds	r3, #12
 80017a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	e853 3f00 	ldrex	r3, [r3]
 80017ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f023 0310 	bic.w	r3, r3, #16
 80017b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	330c      	adds	r3, #12
 80017c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80017c4:	61fa      	str	r2, [r7, #28]
 80017c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c8:	69b9      	ldr	r1, [r7, #24]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	e841 2300 	strex	r3, r2, [r1]
 80017d0:	617b      	str	r3, [r7, #20]
   return(result);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e3      	bne.n	80017a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80017de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f83d 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80017ea:	e023      	b.n	8001834 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80017ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_UART_IRQHandler+0x4f4>
 80017f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80017fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f8b0 	bl	800196a <UART_Transmit_IT>
    return;
 800180a:	e014      	b.n	8001836 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800180c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <HAL_UART_IRQHandler+0x51e>
 8001818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800181c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f8f0 	bl	8001a0a <UART_EndTransmit_IT>
    return;
 800182a:	e004      	b.n	8001836 <HAL_UART_IRQHandler+0x51e>
    return;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <HAL_UART_IRQHandler+0x51e>
      return;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <HAL_UART_IRQHandler+0x51e>
      return;
 8001834:	bf00      	nop
  }
}
 8001836:	37e8      	adds	r7, #232	@ 0xe8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800187c:	b480      	push	{r7}
 800187e:	b095      	sub	sp, #84	@ 0x54
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	330c      	adds	r3, #12
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800188c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188e:	e853 3f00 	ldrex	r3, [r3]
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	330c      	adds	r3, #12
 80018a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80018a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018ac:	e841 2300 	strex	r3, r2, [r1]
 80018b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80018b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e5      	bne.n	8001884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3314      	adds	r3, #20
 80018be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	e853 3f00 	ldrex	r3, [r3]
 80018c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3314      	adds	r3, #20
 80018d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e0:	e841 2300 	strex	r3, r2, [r1]
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e5      	bne.n	80018b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d119      	bne.n	8001928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	330c      	adds	r3, #12
 80018fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	e853 3f00 	ldrex	r3, [r3]
 8001902:	60bb      	str	r3, [r7, #8]
   return(result);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f023 0310 	bic.w	r3, r3, #16
 800190a:	647b      	str	r3, [r7, #68]	@ 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	330c      	adds	r3, #12
 8001912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001914:	61ba      	str	r2, [r7, #24]
 8001916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001918:	6979      	ldr	r1, [r7, #20]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	e841 2300 	strex	r3, r2, [r1]
 8001920:	613b      	str	r3, [r7, #16]
   return(result);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e5      	bne.n	80018f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001936:	bf00      	nop
 8001938:	3754      	adds	r7, #84	@ 0x54
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff ff77 	bl	8001850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b21      	cmp	r3, #33	@ 0x21
 800197c:	d13e      	bne.n	80019fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001986:	d114      	bne.n	80019b2 <UART_Transmit_IT+0x48>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d110      	bne.n	80019b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	1c9a      	adds	r2, r3, #2
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	621a      	str	r2, [r3, #32]
 80019b0:	e008      	b.n	80019c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6211      	str	r1, [r2, #32]
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4619      	mov	r1, r3
 80019d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10f      	bne.n	80019f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e000      	b.n	80019fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019fc:	2302      	movs	r3, #2
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fdfc 	bl	8000628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b08c      	sub	sp, #48	@ 0x30
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b22      	cmp	r3, #34	@ 0x22
 8001a4c:	f040 80ae 	bne.w	8001bac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a58:	d117      	bne.n	8001a8a <UART_Receive_IT+0x50>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d113      	bne.n	8001a8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	1c9a      	adds	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a88:	e026      	b.n	8001ad8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a9c:	d007      	beq.n	8001aae <UART_Receive_IT+0x74>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <UART_Receive_IT+0x82>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e008      	b.n	8001ace <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001acc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d15d      	bne.n	8001ba8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0220 	bic.w	r2, r2, #32
 8001afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d135      	bne.n	8001b9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	e853 3f00 	ldrex	r3, [r3]
 8001b46:	613b      	str	r3, [r7, #16]
   return(result);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f023 0310 	bic.w	r3, r3, #16
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	330c      	adds	r3, #12
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	623a      	str	r2, [r7, #32]
 8001b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5c:	69f9      	ldr	r1, [r7, #28]
 8001b5e:	6a3a      	ldr	r2, [r7, #32]
 8001b60:	e841 2300 	strex	r3, r2, [r1]
 8001b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e5      	bne.n	8001b38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d10a      	bne.n	8001b90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe64 	bl	8001864 <HAL_UARTEx_RxEventCallback>
 8001b9c:	e002      	b.n	8001ba4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fe4c 	bl	800183c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e002      	b.n	8001bae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3730      	adds	r7, #48	@ 0x30
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bbc:	b0c0      	sub	sp, #256	@ 0x100
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd4:	68d9      	ldr	r1, [r3, #12]
 8001bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	ea40 0301 	orr.w	r3, r0, r1
 8001be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c10:	f021 010c 	bic.w	r1, r1, #12
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c32:	6999      	ldr	r1, [r3, #24]
 8001c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	ea40 0301 	orr.w	r3, r0, r1
 8001c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b8f      	ldr	r3, [pc, #572]	@ (8001e84 <UART_SetConfig+0x2cc>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d005      	beq.n	8001c58 <UART_SetConfig+0xa0>
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b8d      	ldr	r3, [pc, #564]	@ (8001e88 <UART_SetConfig+0x2d0>)
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d104      	bne.n	8001c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c58:	f7ff f9bc 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c60:	e003      	b.n	8001c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c62:	f7ff f9a3 	bl	8000fac <HAL_RCC_GetPCLK1Freq>
 8001c66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c74:	f040 810c 	bne.w	8001e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	1891      	adds	r1, r2, r2
 8001c90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c92:	415b      	adcs	r3, r3
 8001c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	eb12 0801 	adds.w	r8, r2, r1
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	eb43 0901 	adc.w	r9, r3, r1
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cba:	4690      	mov	r8, r2
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	eb18 0303 	adds.w	r3, r8, r3
 8001cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001cc8:	462b      	mov	r3, r5
 8001cca:	eb49 0303 	adc.w	r3, r9, r3
 8001cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001cde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	18db      	adds	r3, r3, r3
 8001cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cec:	4613      	mov	r3, r2
 8001cee:	eb42 0303 	adc.w	r3, r2, r3
 8001cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001cfc:	f7fe fa6a 	bl	80001d4 <__aeabi_uldivmod>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <UART_SetConfig+0x2d4>)
 8001d06:	fba3 2302 	umull	r2, r3, r3, r2
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	011c      	lsls	r4, r3, #4
 8001d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d20:	4642      	mov	r2, r8
 8001d22:	464b      	mov	r3, r9
 8001d24:	1891      	adds	r1, r2, r2
 8001d26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d28:	415b      	adcs	r3, r3
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d30:	4641      	mov	r1, r8
 8001d32:	eb12 0a01 	adds.w	sl, r2, r1
 8001d36:	4649      	mov	r1, r9
 8001d38:	eb43 0b01 	adc.w	fp, r3, r1
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d50:	4692      	mov	sl, r2
 8001d52:	469b      	mov	fp, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	eb1a 0303 	adds.w	r3, sl, r3
 8001d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d5e:	464b      	mov	r3, r9
 8001d60:	eb4b 0303 	adc.w	r3, fp, r3
 8001d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	18db      	adds	r3, r3, r3
 8001d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d82:	4613      	mov	r3, r2
 8001d84:	eb42 0303 	adc.w	r3, r2, r3
 8001d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d92:	f7fe fa1f 	bl	80001d4 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e8c <UART_SetConfig+0x2d4>)
 8001d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2264      	movs	r2, #100	@ 0x64
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	1acb      	subs	r3, r1, r3
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001db2:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <UART_SetConfig+0x2d4>)
 8001db4:	fba3 2302 	umull	r2, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001dc0:	441c      	add	r4, r3
 8001dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	1891      	adds	r1, r2, r2
 8001dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ddc:	415b      	adcs	r3, r3
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001de4:	4641      	mov	r1, r8
 8001de6:	1851      	adds	r1, r2, r1
 8001de8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001dea:	4649      	mov	r1, r9
 8001dec:	414b      	adcs	r3, r1
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	00cb      	lsls	r3, r1, #3
 8001e00:	4651      	mov	r1, sl
 8001e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e06:	4651      	mov	r1, sl
 8001e08:	00ca      	lsls	r2, r1, #3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4642      	mov	r2, r8
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e18:	464b      	mov	r3, r9
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	eb42 0303 	adc.w	r3, r2, r3
 8001e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e38:	460b      	mov	r3, r1
 8001e3a:	18db      	adds	r3, r3, r3
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3e:	4613      	mov	r3, r2
 8001e40:	eb42 0303 	adc.w	r3, r2, r3
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e4e:	f7fe f9c1 	bl	80001d4 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <UART_SetConfig+0x2d4>)
 8001e58:	fba3 1302 	umull	r1, r3, r3, r2
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	2164      	movs	r1, #100	@ 0x64
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	3332      	adds	r3, #50	@ 0x32
 8001e6a:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <UART_SetConfig+0x2d4>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	f003 0207 	and.w	r2, r3, #7
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4422      	add	r2, r4
 8001e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e80:	e106      	b.n	8002090 <UART_SetConfig+0x4d8>
 8001e82:	bf00      	nop
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001ea2:	4642      	mov	r2, r8
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	1891      	adds	r1, r2, r2
 8001ea8:	6239      	str	r1, [r7, #32]
 8001eaa:	415b      	adcs	r3, r3
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eb2:	4641      	mov	r1, r8
 8001eb4:	1854      	adds	r4, r2, r1
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	eb43 0501 	adc.w	r5, r3, r1
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	00eb      	lsls	r3, r5, #3
 8001ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eca:	00e2      	lsls	r2, r4, #3
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	18e3      	adds	r3, r4, r3
 8001ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ed8:	464b      	mov	r3, r9
 8001eda:	eb45 0303 	adc.w	r3, r5, r3
 8001ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001efe:	4629      	mov	r1, r5
 8001f00:	008b      	lsls	r3, r1, #2
 8001f02:	4621      	mov	r1, r4
 8001f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f08:	4621      	mov	r1, r4
 8001f0a:	008a      	lsls	r2, r1, #2
 8001f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f10:	f7fe f960 	bl	80001d4 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4b60      	ldr	r3, [pc, #384]	@ (800209c <UART_SetConfig+0x4e4>)
 8001f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	011c      	lsls	r4, r3, #4
 8001f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f34:	4642      	mov	r2, r8
 8001f36:	464b      	mov	r3, r9
 8001f38:	1891      	adds	r1, r2, r2
 8001f3a:	61b9      	str	r1, [r7, #24]
 8001f3c:	415b      	adcs	r3, r3
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f44:	4641      	mov	r1, r8
 8001f46:	1851      	adds	r1, r2, r1
 8001f48:	6139      	str	r1, [r7, #16]
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	414b      	adcs	r3, r1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f5c:	4659      	mov	r1, fp
 8001f5e:	00cb      	lsls	r3, r1, #3
 8001f60:	4651      	mov	r1, sl
 8001f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f66:	4651      	mov	r1, sl
 8001f68:	00ca      	lsls	r2, r1, #3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4642      	mov	r2, r8
 8001f72:	189b      	adds	r3, r3, r2
 8001f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f78:	464b      	mov	r3, r9
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	eb42 0303 	adc.w	r3, r2, r3
 8001f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	008b      	lsls	r3, r1, #2
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	008a      	lsls	r2, r1, #2
 8001faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001fae:	f7fe f911 	bl	80001d4 <__aeabi_uldivmod>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4b38      	ldr	r3, [pc, #224]	@ (800209c <UART_SetConfig+0x4e4>)
 8001fba:	fba3 2301 	umull	r2, r3, r3, r1
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2264      	movs	r2, #100	@ 0x64
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	1acb      	subs	r3, r1, r3
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	3332      	adds	r3, #50	@ 0x32
 8001fcc:	4a33      	ldr	r2, [pc, #204]	@ (800209c <UART_SetConfig+0x4e4>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd8:	441c      	add	r4, r3
 8001fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fde:	2200      	movs	r2, #0
 8001fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001fe8:	4642      	mov	r2, r8
 8001fea:	464b      	mov	r3, r9
 8001fec:	1891      	adds	r1, r2, r2
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	415b      	adcs	r3, r3
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	1851      	adds	r1, r2, r1
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	4649      	mov	r1, r9
 8002000:	414b      	adcs	r3, r1
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002010:	4659      	mov	r1, fp
 8002012:	00cb      	lsls	r3, r1, #3
 8002014:	4651      	mov	r1, sl
 8002016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800201a:	4651      	mov	r1, sl
 800201c:	00ca      	lsls	r2, r1, #3
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	4603      	mov	r3, r0
 8002024:	4642      	mov	r2, r8
 8002026:	189b      	adds	r3, r3, r2
 8002028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800202a:	464b      	mov	r3, r9
 800202c:	460a      	mov	r2, r1
 800202e:	eb42 0303 	adc.w	r3, r2, r3
 8002032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	663b      	str	r3, [r7, #96]	@ 0x60
 800203e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800204c:	4649      	mov	r1, r9
 800204e:	008b      	lsls	r3, r1, #2
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002056:	4641      	mov	r1, r8
 8002058:	008a      	lsls	r2, r1, #2
 800205a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800205e:	f7fe f8b9 	bl	80001d4 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <UART_SetConfig+0x4e4>)
 8002068:	fba3 1302 	umull	r1, r3, r3, r2
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	2164      	movs	r1, #100	@ 0x64
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	3332      	adds	r3, #50	@ 0x32
 800207a:	4a08      	ldr	r2, [pc, #32]	@ (800209c <UART_SetConfig+0x4e4>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4422      	add	r2, r4
 800208e:	609a      	str	r2, [r3, #8]
}
 8002090:	bf00      	nop
 8002092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002096:	46bd      	mov	sp, r7
 8002098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209c:	51eb851f 	.word	0x51eb851f

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	4d0d      	ldr	r5, [pc, #52]	@ (80020d8 <__libc_init_array+0x38>)
 80020a4:	4c0d      	ldr	r4, [pc, #52]	@ (80020dc <__libc_init_array+0x3c>)
 80020a6:	1b64      	subs	r4, r4, r5
 80020a8:	10a4      	asrs	r4, r4, #2
 80020aa:	2600      	movs	r6, #0
 80020ac:	42a6      	cmp	r6, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	4d0b      	ldr	r5, [pc, #44]	@ (80020e0 <__libc_init_array+0x40>)
 80020b2:	4c0c      	ldr	r4, [pc, #48]	@ (80020e4 <__libc_init_array+0x44>)
 80020b4:	f000 f818 	bl	80020e8 <_init>
 80020b8:	1b64      	subs	r4, r4, r5
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	2600      	movs	r6, #0
 80020be:	42a6      	cmp	r6, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c8:	4798      	blx	r3
 80020ca:	3601      	adds	r6, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d2:	4798      	blx	r3
 80020d4:	3601      	adds	r6, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08002110 	.word	0x08002110
 80020dc:	08002110 	.word	0x08002110
 80020e0:	08002110 	.word	0x08002110
 80020e4:	08002114 	.word	0x08002114

080020e8 <_init>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr

080020f4 <_fini>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr
